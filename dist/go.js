(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
	typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
	(factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

var e = [/^const(?![a-zA-Z\¡-\￿_0-9_])/, /^var(?![a-zA-Z\¡-\￿_0-9_])/, /^type(?![a-zA-Z\¡-\￿_0-9_])/, /^import(?![a-zA-Z\¡-\￿_0-9_])/, /^package(?![a-zA-Z\¡-\￿_0-9_])/, /^go(?![a-zA-Z\¡-\￿_0-9_])/, /^defer(?![a-zA-Z\¡-\￿_0-9_])/, /^return(?![a-zA-Z\¡-\￿_0-9_])/, /^break(?![a-zA-Z\¡-\￿_0-9_])/, /^continue(?![a-zA-Z\¡-\￿_0-9_])/, /^default(?![a-zA-Z\¡-\￿_0-9_])/, /^case(?![a-zA-Z\¡-\￿_0-9_])/, /^select(?![a-zA-Z\¡-\￿_0-9_])/, /^goto(?![a-zA-Z\¡-\￿_0-9_])/, /^fallthrough(?![a-zA-Z\¡-\￿_0-9_])/, /^[a-zA-Z\¡-\￿__][a-zA-Z\¡-\￿_0-9_]*/, [1, "\n", "\t", " "], /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z\¡-\￿_])/, /^\@[a-zA-Z\¡-\￿_]+/, /^[a-zA-Z\¡-\￿_]+/, [0, /^(?!\*\/|\@[a-zA-Z\¡-\￿_]|\{)/, /^[^]/], /^if(?![a-zA-Z\¡-\￿_0-9_])/, /^else(?![a-zA-Z\¡-\￿_0-9_])/, /^switch(?![a-zA-Z\¡-\￿_0-9_])/, /^for(?![a-zA-Z\¡-\￿_0-9_])/, /^(?:\!|\+|\-|\*|\^|\&|\<\-)/, /^range(?![a-zA-Z\¡-\￿_0-9_])/, /^struct(?![a-zA-Z\¡-\￿_0-9_])/, /^interface(?![a-zA-Z\¡-\￿_0-9_])/, /^func(?![a-zA-Z\¡-\￿_0-9_])/, /^map(?![a-zA-Z\¡-\￿_0-9_])/, /^chan(?![a-zA-Z\¡-\￿_0-9_])/, /^(?=\{)/, /^(?:(?:0o|0O)[0-7]+|(?:0x|OX)[0-9a-fA-F]+|(?:[0-9]+(?:\.[0-9]+)?|\.[0-9]+)(?:[eE][\+\-]?[0-9]+)?i?)/, /^(?:true|false|nil)(?![a-zA-Z\¡-\￿_0-9_])/, /^(?:append|cap|close|complex|copy|delete|imag|len|make|new|panic|print|println|real|recover)(?![a-zA-Z\¡-\￿_0-9_])/, /^(?:\+\+|\-\-)/, /^(?:(?:\+|\&\^?|\-|\||\*|\^|\/|\<\<?|\>\>?|\%|\=)\=?|\<\-|\=|\:\=|\!\=)/, /^[a-zA-Z\¡-\￿__][a-zA-Z\¡-\￿_0-9_]*(?=\()/, [1, ";", "\n"], /^[a-zA-Z\¡-\￿__][a-zA-Z\¡-\￿_0-9_]*(?= \:)/, /^(?:\.\.\.)?/];
var nodes = [
  [1, 4, 2],
  [/^[^]/, 0],
  [1, 6, 1],
  [3, "keyword", e[8], -1,
   3, "keyword", e[10], -1,
   3, "keyword", e[29], -1,
   3, "keyword", e[28], -1,
   3, "keyword", e[12], -1,
   3, "keyword", e[11], -1,
   3, "keyword", e[6], -1,
   3, "keyword", e[5], -1,
   3, "keyword", e[30], -1,
   3, "keyword", e[27], -1,
   3, "keyword", e[31], -1,
   3, "keyword", e[22], -1,
   3, "keyword", e[13], -1,
   3, "keyword", e[4], -1,
   3, "keyword", e[23], -1,
   3, "keyword", e[0], -1,
   3, "keyword", e[14], -1,
   3, "keyword", e[21], -1,
   3, "keyword", e[26], -1,
   3, "keyword", e[2], -1,
   3, "keyword", e[9], -1,
   3, "keyword", e[24], -1,
   3, "keyword", e[3], -1,
   3, "keyword", e[7], -1,
   3, "keyword", e[1], -1,
   3, "atom", e[34], -1,
   3, "builtin", e[35], -1,
   3, "operator", e[37], -1,
   3, "operator", e[25], -1,
   3, "operator", e[36], -1,
   3, "number", e[33], -1,
   2, 9, -1, {"name":"string","token":"string"},
   3, "variable", e[15], -1,
   2, 11, -1, {"name":"comment","token":"comment"},
   /^[^]/, -1],
  [/^[ \t]/, 4,
   2, 11, 4, {"name":"comment","token":"comment"},
   [0, /^(?=\n)/, [7, "skippableNewline"]], 5,
   0, -1],
  ["\n", 4],
  [/^[ \t]/, 6,
   2, 11, 6, {"name":"comment","token":"comment"},
   "\n", 6,
   0, 7],
  [2, 17, 8, {"name":"Statement"},
   0, -1],
  [/^[ \t]/, 8,
   2, 11, 8, {"name":"comment","token":"comment"},
   e[39], 8,
   0, 7],
  [/^(?:\'(?:\\.(?:(?!\').)*|.)\'|\"(?:\\.|(?!\").)*\")/, -1,
   "`", 10],
  [[0, /^(?!\`)/, /^[^]/], 10,
   "`", -1],
  [/^\/\*\*(?!\/)/, 12,
   "/*", 16,
   /^\/\/.*/, -1],
  [0, 13,
   2, 53, 12, {"name":"doccomment.braced"},
   0, 14],
  [e[20], 15],
  [2, 61, 14, {"name":"doccomment.tagGroup"},
   "*/", -1],
  [0, 13,
   0, 12],
  [[0, /^(?!\*\/)/, /^[^]/], 16,
   "*/", -1],
  [3, "keyword", e[0], 18,
   3, "keyword", e[1], 18,
   3, "keyword", e[2], 20,
   3, "keyword", e[3], 24,
   3, "keyword", e[4], 28,
   2, 69, -1, {"name":"IfStatement"},
   2, 91, -1, {"name":"SwitchStatement"},
   2, 100, -1, {"name":"ForStatement"},
   3, "keyword", e[5], 30,
   3, "keyword", e[6], 30,
   3, "keyword", e[7], 32,
   3, "keyword", e[8], 34,
   3, "keyword", e[9], 34,
   3, "keyword", e[10], 36,
   3, "keyword", e[11], 37,
   /^[a-zA-Z\¡-\￿__][a-zA-Z\¡-\￿_0-9_]*(?= *\:(?!\=))/, 36,
   2, 110, -1, {"name":"Block"},
   3, "keyword", e[12], 40,
   3, "keyword", e[13], 42,
   3, "keyword", e[14], -1,
   3, "keyword", e[11], 44,
   1, 115, 48],
  [1, 4, 19],
  [1, 129, -1],
  [1, 4, 21],
  [2, 139, -1, {"name":"Set"},
   3, "def", e[15], 22],
  [1, 4, 23],
  [1, 144, -1],
  [1, 4, 25],
  [2, 179, -1, {"name":"Set"},
   ".", 26,
   3, "def", e[15], 26,
   0, 26],
  [1, 4, 27],
  [2, 9, -1, {"name":"string","token":"string"}],
  [1, 4, 29],
  [3, "variable", e[15], -1],
  [1, 4, 31],
  [1, 115, -1],
  [1, 4, 33],
  [1, 184, -1],
  [1, 4, 35],
  [/^(?:[a-zA-Z\¡-\￿__][a-zA-Z\¡-\￿_0-9_]*)?/, -1],
  [1, 4, 38],
  [1, 4, 39],
  [":", -1],
  [1, 184, 36],
  [1, 4, 41],
  [2, 110, -1, {"name":"Block"}],
  [1, 4, 43],
  [e[15], -1],
  [1, 4, 45],
  [2, 17, 46, {"name":"Statement"}],
  [1, 4, 47],
  [":", -1],
  [1, 4, 49],
  [",", 50,
   0, -1],
  [1, 4, 51],
  [1, 115, 52],
  [1, 4, 49],
  ["{", 54],
  [3, "tag", e[17], 55,
   3, "tag", e[18], 56,
   2, 190, 60, {"name":"doccomment.type","token":"type"}],
  [e[16], 55,
   "{", 57,
   0, 56],
  [[0, /^(?!\}|\*\/)/, /^[^]/], 56,
   0, 60],
  [2, 190, 58, {"name":"doccomment.type","token":"type"}],
  ["}", 59],
  [e[16], 59,
   3, "def", e[19], 56,
   0, 56],
  ["}", -1],
  [3, "tag", e[17], 62,
   3, "tag", e[18], 66],
  [e[16], 62,
   "{", 63,
   0, 66],
  [2, 190, 64, {"name":"doccomment.type","token":"type"}],
  ["}", 65],
  [e[16], 65,
   3, "def", e[19], 66,
   0, 66],
  [0, 67,
   2, 53, 66, {"name":"doccomment.braced"},
   0, -1],
  [e[20], 68],
  [0, 67,
   0, 66],
  [3, "keyword", e[21], 70],
  [1, 4, 71],
  [1, 191, 72],
  [1, 4, 73],
  [";", 74,
   0, 76],
  [1, 4, 75],
  [1, 191, 76],
  [1, 4, 77],
  [2, 110, 78, {"name":"Block"}],
  [1, 4, 79],
  [3, "keyword", e[22], 80,
   0, -1],
  [1, 4, 81],
  [3, "keyword", e[21], 82,
   0, 83],
  [1, 4, 84],
  [1, 4, 85],
  [1, 191, 86],
  [2, 110, 87, {"name":"Block"}],
  [1, 4, 88],
  [1, 4, 79],
  [";", 89,
   0, 83],
  [1, 4, 90],
  [1, 191, 83],
  [3, "keyword", e[23], 92],
  [1, 4, 93],
  [1, 191, 94,
   0, 98],
  [1, 4, 95],
  [";", 96,
   0, 98],
  [1, 4, 97],
  [1, 191, 98,
   0, 98],
  [1, 4, 99],
  [2, 110, -1, {"name":"Block"}],
  [3, "keyword", e[24], 101],
  [1, 4, 102],
  [1, 199, 103,
   1, 191, 105],
  [1, 4, 104],
  [1, 191, 105],
  [1, 4, 106],
  [";", 107,
   2, 110, -1, {"name":"Block"}],
  [1, 4, 108],
  [1, 191, 109,
   0, 109],
  [1, 4, 106],
  ["{", 111],
  [1, 4, 112],
  [1, 6, 113],
  [1, 4, 114],
  ["}", -1],
  [1, 199, 116,
   0, 118],
  [1, 4, 117],
  [1, 115, -1],
  [3, "operator", e[25], 119,
   3, "keyword", e[26], 119,
   [5, 206], 120,
   1, 212, 121],
  [1, 4, 118],
  [3, "type", e[15], 122],
  [1, 4, 123],
  [1, 4, 124],
  [1, 219, 125,
   2, 228, 125, {"name":"LiteralBody"},
   0, -1],
  [".", 126,
   e[32], 121],
  [1, 4, 123],
  [1, 4, 127],
  [3, "property", e[15], 128],
  [1, 4, 124],
  [2, 233, -1, {"name":"Set"},
   3, "def", e[15], 130],
  [1, 4, 131],
  [",", 132,
   1, 144, 133,
   0, 133],
  [1, 4, 134],
  [1, 4, 135],
  [3, "def", e[15], 136],
  [3, "operator", "=", 137,
   0, -1],
  [1, 4, 131],
  [1, 4, 138],
  [1, 184, -1],
  ["(", 140],
  [1, 4, 141],
  [1, 238, 142],
  [1, 4, 143],
  [")", -1],
  ["[", 145,
   3, "keyword", e[27], 151,
   3, "keyword", e[28], 153,
   "*", 155,
   3, "keyword", e[29], 157,
   3, "keyword", e[30], 161,
   3, "operator", "<-", 169,
   3, "keyword", e[31], 170,
   "(", 173,
   0, 177],
  [1, 4, 146],
  [1, 115, 147,
   0, 147],
  [1, 4, 148],
  ["]", 149],
  [1, 4, 150],
  [1, 144, -1],
  [1, 4, 152],
  [2, 243, -1, {"name":"StructBody"}],
  [1, 4, 154],
  [2, 248, -1, {"name":"InterfaceBody"}],
  [1, 4, 156],
  [1, 144, -1],
  [1, 4, 158],
  [2, 253, 159, {"name":"ParamList"}],
  [1, 4, 160],
  [2, 253, -1, {"name":"ParamList"},
   1, 144, -1,
   0, -1],
  [1, 4, 162],
  ["[", 163],
  [1, 4, 164],
  [1, 144, 165],
  [1, 4, 166],
  ["]", 167],
  [1, 4, 168],
  [1, 144, -1],
  [1, 4, 171],
  [1, 4, 172],
  [1, 144, -1],
  [3, "operator", "<-", 169,
   0, 169],
  [1, 4, 174],
  [1, 144, 175],
  [1, 4, 176],
  [")", -1],
  [3, "meta", /^[a-zA-Z\¡-\￿__][a-zA-Z\¡-\￿_0-9_]*\./, 178,
   3, "type", e[15], -1],
  [1, 4, 177],
  ["(", 180],
  [1, 4, 181],
  [1, 258, 182],
  [1, 4, 183],
  [")", -1],
  [1, 115, 185,
   0, -1],
  [1, 4, 186],
  [",", 187,
   0, -1],
  [1, 4, 188],
  [1, 115, 189,
   0, 189],
  [1, 4, 186],
  [1, 263, -1],
  [1, 199, 192,
   0, 194],
  [1, 4, 193],
  [1, 115, -1],
  [3, "operator", e[25], 195,
   3, "keyword", e[26], 195,
   1, 212, 196],
  [1, 4, 194],
  [1, 4, 197],
  [1, 267, 198,
   0, -1],
  [1, 4, 197],
  [[5, 276], 200],
  [3, "def", e[15], 201],
  [1, 4, 202],
  [",", 203,
   3, "operator", ":=", -1],
  [1, 4, 204],
  [3, "def", e[15], 205],
  [1, 4, 202],
  [3, "type", e[15], 207],
  [1, 4, 208],
  [".", 209,
   e[32], -1],
  [1, 4, 210],
  [3, "property", e[15], 211],
  [1, 4, 208],
  [3, "number", e[33], -1,
   2, 9, -1, {"name":"string","token":"string"},
   3, "atom", e[34], -1,
   3, "keyword", e[29], 213,
   3, "builtin", e[35], -1,
   3, "variable callee", e[38], -1,
   3, "variable", e[15], -1,
   2, 282, 215, {"name":"Bracketed"},
   "*", 217,
   2, 290, -1, {"name":"ParenExpr"}],
  [1, 4, 214],
  [2, 295, -1, {"name":"FunctionDef"}],
  [1, 4, 216],
  [1, 144, -1,
   0, -1],
  [1, 4, 218],
  [1, 144, -1],
  [".(", 220,
   ".", 224,
   3, "operator", e[36], -1,
   3, "operator", e[37], 226,
   2, 310, -1, {"name":"ArgList"},
   2, 282, -1, {"name":"Bracketed"}],
  [1, 4, 221],
  [1, 144, 222],
  [1, 4, 223],
  [")", -1],
  [1, 4, 225],
  [3, "property callee", e[38], -1,
   3, "property", e[15], -1],
  [1, 4, 227],
  [1, 115, -1],
  ["{", 229],
  [1, 4, 230],
  [1, 317, 231],
  [1, 4, 232],
  ["}", -1],
  ["(", 234],
  [1, 4, 235],
  [1, 331, 236],
  [1, 4, 237],
  [")", -1],
  [/^[ \t]/, 238,
   2, 11, 238, {"name":"comment","token":"comment"},
   "\n", 238,
   0, 239],
  [3, "def", e[15], 240,
   0, -1],
  [1, 4, 241],
  [1, 144, 242],
  [/^[ \t]/, 242,
   2, 11, 242, {"name":"comment","token":"comment"},
   e[39], 242,
   0, 239],
  ["{", 244],
  [1, 4, 245],
  [1, 343, 246],
  [1, 4, 247],
  ["}", -1],
  ["{", 249],
  [1, 4, 250],
  [1, 355, 251],
  [1, 4, 252],
  ["}", -1],
  ["(", 254],
  [1, 4, 255],
  [1, 360, 256],
  [1, 4, 257],
  [")", -1],
  [/^[ \t]/, 258,
   2, 11, 258, {"name":"comment","token":"comment"},
   "\n", 258,
   0, 259],
  [".", 260,
   3, "def", e[15], 260,
   0, 260,
   0, -1],
  [1, 4, 261],
  [2, 9, 262, {"name":"string","token":"string"}],
  [/^[ \t]/, 262,
   2, 11, 262, {"name":"comment","token":"comment"},
   e[39], 262,
   0, 259],
  [/^(?!\}|\*\/)/, 264,
   0, -1],
  ["{", 265,
   /^[^]/, 263],
  [1, 263, 266],
  [/^\}?/, 263],
  [".(", 268,
   ".", 272,
   3, "operator", e[36], -1,
   3, "operator", e[37], 274,
   2, 310, -1, {"name":"ArgList"},
   2, 282, -1, {"name":"Bracketed"}],
  [1, 4, 269],
  [1, 144, 270],
  [1, 4, 271],
  [")", -1],
  [1, 4, 273],
  [3, "property callee", e[38], -1,
   3, "property", e[15], -1],
  [1, 4, 275],
  [1, 191, -1],
  [e[15], 277],
  [1, 4, 278],
  [",", 279,
   ":=", -1],
  [1, 4, 280],
  [e[15], 281],
  [1, 4, 278],
  ["[", 283],
  [1, 4, 284],
  [1, 184, 285],
  [1, 4, 286],
  [":", 287,
   "]", -1],
  [1, 4, 288],
  [1, 115, 289,
   0, 289],
  [1, 4, 286],
  ["(", 291],
  [1, 4, 292],
  [1, 184, 293],
  [1, 4, 294],
  [")", -1],
  ["(", 296,
   0, 302],
  [1, 4, 297],
  [3, "def", e[15], 298],
  [1, 4, 299],
  [1, 144, 300],
  [1, 4, 301],
  [")", 302],
  [1, 4, 303],
  [3, "def", e[15], 304,
   0, 304],
  [1, 4, 305],
  [2, 253, 306, {"name":"ParamList"}],
  [1, 4, 307],
  [2, 253, 308, {"name":"ParamList"},
   1, 144, 308,
   0, 308],
  [1, 4, 309],
  [2, 110, -1, {"name":"Block"},
   0, -1],
  ["(", 311],
  [1, 4, 312],
  [1, 184, 313],
  [1, 4, 314],
  [e[41], 315],
  [1, 4, 316],
  [")", -1],
  [3, "property", e[40], 318,
   1, 115, 318,
   0, -1],
  [1, 4, 319],
  [":", 320,
   0, 321],
  [1, 4, 322],
  [1, 4, 323],
  [1, 115, 321],
  [",", 324,
   0, -1],
  [1, 4, 325],
  [3, "property", e[40], 326,
   1, 115, 326,
   0, 327],
  [1, 4, 328],
  [1, 4, 323],
  [":", 329,
   0, 327],
  [1, 4, 330],
  [1, 115, 327],
  [/^[ \t]/, 331,
   2, 11, 331, {"name":"comment","token":"comment"},
   "\n", 331,
   0, 332],
  [3, "def", e[15], 333,
   0, -1],
  [1, 4, 334],
  [",", 335,
   1, 144, 336,
   0, 336],
  [1, 4, 337],
  [1, 4, 338],
  [3, "def", e[15], 339],
  [3, "operator", "=", 340,
   0, 341],
  [1, 4, 334],
  [1, 4, 342],
  [/^[ \t]/, 341,
   2, 11, 341, {"name":"comment","token":"comment"},
   e[39], 341,
   0, 332],
  [1, 184, 341],
  [/^[ \t]/, 343,
   2, 11, 343, {"name":"comment","token":"comment"},
   "\n", 343,
   0, 344],
  [3, "def", e[15], 345,
   "*", 346,
   0, -1],
  [1, 4, 347],
  [1, 4, 348],
  [",", 349,
   0, 346],
  [1, 144, 350],
  [1, 4, 351],
  [1, 4, 352],
  [3, "def", e[15], 353],
  [2, 9, 354, {"name":"string","token":"string"},
   0, 354],
  [1, 4, 347],
  [/^[ \t]/, 354,
   2, 11, 354, {"name":"comment","token":"comment"},
   e[39], 354,
   0, 344],
  [/^[ \t]/, 355,
   2, 11, 355, {"name":"comment","token":"comment"},
   "\n", 355,
   0, 356],
  [3, "property", /^[a-zA-Z\¡-\￿__][a-zA-Z\¡-\￿_0-9_]*(?= \()/, 357,
   1, 144, 358,
   0, -1],
  [1, 4, 359],
  [/^[ \t]/, 358,
   2, 11, 358, {"name":"comment","token":"comment"},
   e[39], 358,
   0, 356],
  [2, 253, 358, {"name":"ParamList"}],
  [3, "def", e[15], 361,
   0, 362,
   0, -1],
  [1, 4, 363],
  [1, 4, 364],
  [",", 365,
   0, 362],
  [e[41], 366],
  [1, 4, 367],
  [1, 4, 368],
  [3, "def", e[15], 369],
  [1, 144, 370,
   0, 370],
  [1, 4, 363],
  [1, 4, 371],
  [",", 372,
   0, -1],
  [1, 4, 373],
  [3, "def", e[15], 374,
   0, 375,
   0, 376],
  [1, 4, 377],
  [1, 4, 378],
  [1, 4, 371],
  [",", 379,
   0, 375],
  [e[41], 380],
  [1, 4, 381],
  [1, 4, 382],
  [3, "def", e[15], 383],
  [1, 144, 376,
   0, 376],
  [1, 4, 377]
];
var start = 0;
var token = 3;


var grammar = Object.freeze({
	nodes: nodes,
	start: start,
	token: token
});

function getScope(context, scopes) {
  for (var cx = context; cx; cx = cx.parent)
    { if (scopes.indexOf(cx.name) > -1) { return cx } }
}
function isLocal(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
  return false
}

var varRE = /(^|\s)variable($|\s)/;

function markLocals(type, scopes, stream, state, once) {
  if (type == "def") {
    var scope = getScope(state.context, scopes), name = stream.current();
    if (scope) {
      if (!scope.locals) { scope.locals = []; }
      if (once && scope.locals.indexOf(name) > -1)
        { return "variable-2" }
      scope.locals.push(name);
    }
  } else if (varRE.test(type) && !/qualified/.test(type) &&
             isLocal(state.context, stream.current())) {
    type = type.replace(varRE, "$1variable-2$2");
  }
  return type
}

var scopes = ["Block", "FunctionDef", "IfStatement", "ForStatement", "SwitchStatement"];
var allowNewline = ["LiteralBody", "Bracketed", "ArgList", "ParamList", "ParenExpr"];

function skippableNewline(line, pos, cx) {
  if (cx && allowNewline.indexOf(cx.name) > -1) { return true }
  var match = /(?:(\w+)|[\d"'\)\]\}:]|\+\+|--)\s*(?:\/\/.*)?$/.exec(line.slice(0, pos));
  return !match ||
    (match[1] ? /^(?:func|interface|select|case|defer|go|map|struct|chan|else|goto|package|switch|const|if|range|type|for|import|var)$/.test(match[1]) : false)
}

var bracketed = {
  Block: "}", LiteralBody: "}", StructBody: "}", InterfaceBody: "}",
  Bracketed: "]",
  Set: ")", ParamList: ")", ArgList: ")", ParenExpr: ")"
};

function findIndent(cx, textAfter, curLine, config) {
  if (!cx) { return 0 }
  if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

  var brack = bracketed[cx.name];
  if (brack) {
    var closed = textAfter && textAfter.charAt(0) == brack;
    var flat = closed || curLine == cx.startLine;
    if (cx.name == "Block") {
      curLine = cx.parent.startLine;
      if (/^(case|default)\b/.test(textAfter)) { flat = true; }
    } else {
      curLine = cx.startLine;
    }
    return findIndent(cx.parent, closed ? null : textAfter, curLine, config) + (flat ? 0 : config.tabSize)
  } else if (cx.name == "Statement") {
    return CodeMirror.countColumn(cx.startLine, null, config.tabSize) +
      (curLine == cx.startLine ? 0 : config.tabSize)
  } else {
    return findIndent(cx.parent, textAfter, curLine, config)
  }
}

var GoMode = (function (superclass) {
  function GoMode(conf) {
    superclass.call(this, grammar, {
      predicates: {skippableNewline: skippableNewline}
    });
    this.conf = conf;
  }

  if ( superclass ) GoMode.__proto__ = superclass;
  GoMode.prototype = Object.create( superclass && superclass.prototype );
  GoMode.prototype.constructor = GoMode;

  GoMode.prototype.token = function token$$1 (stream, state) {
    return markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state)
  };

  GoMode.prototype.indent = function indent (state, textAfter, line) {
    return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, null, this.conf)
  };

  return GoMode;
}(CodeMirror.GrammarMode));

GoMode.prototype.electricInput = /^\s*(?:case .*?:|default:|\{\}?|\})$/;
GoMode.prototype.closeBrackets = "()[]{}''\"\"``";
GoMode.prototype.blockCommentStart = "/*";
GoMode.prototype.blockCommentEnd = "*/";
GoMode.prototype.blockCommentContinue = " * ";
GoMode.prototype.lineComment = "//";
GoMode.prototype.fold = "brace";

CodeMirror.defineMode("google-go", function (conf) { return new GoMode(conf); });

})));
