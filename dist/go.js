(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
	typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
	(factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

var e = [/^const(?![a-zA-Z\¡-\￿_0-9_])/, /^var(?![a-zA-Z\¡-\￿_0-9_])/, /^type(?![a-zA-Z\¡-\￿_0-9_])/, /^import(?![a-zA-Z\¡-\￿_0-9_])/, /^package(?![a-zA-Z\¡-\￿_0-9_])/, /^if(?![a-zA-Z\¡-\￿_0-9_])/, /^switch(?![a-zA-Z\¡-\￿_0-9_])/, /^for(?![a-zA-Z\¡-\￿_0-9_])/, /^go(?![a-zA-Z\¡-\￿_0-9_])/, /^defer(?![a-zA-Z\¡-\￿_0-9_])/, /^return(?![a-zA-Z\¡-\￿_0-9_])/, /^break(?![a-zA-Z\¡-\￿_0-9_])/, /^continue(?![a-zA-Z\¡-\￿_0-9_])/, /^default(?![a-zA-Z\¡-\￿_0-9_])/, /^case(?![a-zA-Z\¡-\￿_0-9_])/, /^select(?![a-zA-Z\¡-\￿_0-9_])/, /^goto(?![a-zA-Z\¡-\￿_0-9_])/, /^fallthrough(?![a-zA-Z\¡-\￿_0-9_])/, /^[a-zA-Z\¡-\￿__][a-zA-Z\¡-\￿_0-9_]*/, /^else(?![a-zA-Z\¡-\￿_0-9_])/, [1, "\n", "\t", " "], /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z\¡-\￿_])/, /^\@[a-zA-Z\¡-\￿_]+/, /^[a-zA-Z\¡-\￿_]+/, [0, /^(?!\*\/|\@|\{)/, /^[^]/], /^(?:\!|\+|\-|\*|\^|\&|\<\-)/, /^range(?![a-zA-Z\¡-\￿_0-9_])/, /^struct(?![a-zA-Z\¡-\￿_0-9_])/, /^interface(?![a-zA-Z\¡-\￿_0-9_])/, /^func(?![a-zA-Z\¡-\￿_0-9_])/, /^map(?![a-zA-Z\¡-\￿_0-9_])/, /^chan(?![a-zA-Z\¡-\￿_0-9_])/, /^(?=\{)/, /^(?:(?:0o|0O)[0-7]+|(?:0x|OX)[0-9a-fA-F]+|(?:[0-9]+(?:\.[0-9]+)?|\.[0-9]+)(?:[eE][\+\-]?[0-9]+)?i?)/, /^(?:true|false|nil)(?![a-zA-Z\¡-\￿_0-9_])/, /^(?:\+\+|\-\-)/, /^(?:(?:\+|\&\^?|\-|\||\*|\^|\/|\<\<?|\>\>?|\%|\=)\=?|\<\-|\=|\:\=|\!\=)/, /^[a-zA-Z\¡-\￿__][a-zA-Z\¡-\￿_0-9_]*(?=\()/, [1, ";", "\n"], /^[a-zA-Z\¡-\￿__][a-zA-Z\¡-\￿_0-9_]*(?= \:)/, /^(?:\.\.\.)?/];
var nodes = [
  [1, 4, 2],
  [/^[^]/, 0],
  [1, 6, 1],
  [3, "keyword", e[11], -1,
   3, "keyword", e[13], -1,
   3, "keyword", e[29], -1,
   3, "keyword", e[28], -1,
   3, "keyword", e[15], -1,
   3, "keyword", e[14], -1,
   3, "keyword", e[9], -1,
   3, "keyword", e[8], -1,
   3, "keyword", e[30], -1,
   3, "keyword", e[27], -1,
   3, "keyword", e[31], -1,
   3, "keyword", e[19], -1,
   3, "keyword", e[16], -1,
   3, "keyword", e[4], -1,
   3, "keyword", e[6], -1,
   3, "keyword", e[0], -1,
   3, "keyword", e[17], -1,
   3, "keyword", e[5], -1,
   3, "keyword", e[26], -1,
   3, "keyword", e[2], -1,
   3, "keyword", e[12], -1,
   3, "keyword", e[7], -1,
   3, "keyword", e[3], -1,
   3, "keyword", e[10], -1,
   3, "keyword", e[1], -1,
   3, "atom", e[34], -1,
   3, "operator", e[36], -1,
   3, "operator", e[25], -1,
   3, "operator", e[35], -1,
   3, "number", e[33], -1,
   2, 9, -1, {"name":"string","token":"string"},
   3, "variable", e[18], -1,
   2, 11, -1, {"name":"comment","token":"comment"},
   /^[^]/, -1],
  [/^[ \t]/, 4,
   2, 11, 4, {"name":"comment","token":"comment"},
   [0, /^(?=\n)/, [7, "skippableNewline"]], 5,
   0, -1],
  ["\n", 4],
  [/^[ \t]/, 6,
   2, 11, 6, {"name":"comment","token":"comment"},
   "\n", 6,
   0, 7],
  [2, 17, 8, {"name":"Statement"},
   0, -1],
  [/^[ \t]/, 8,
   2, 11, 8, {"name":"comment","token":"comment"},
   e[38], 8,
   0, 7],
  [/^(?:\'(?:\\.(?:(?!\').)*|.)\'|\"(?:\\.|(?!\").)*\")/, -1,
   "`", 10],
  [[0, /^(?!\`)/, /^[^]/], 10,
   "`", -1],
  [/^\/\*\*(?!\/)/, 12,
   "/*", 16,
   /^\/\/.*/, -1],
  [0, 13,
   2, 91, 12, {"name":"doccomment.braced"},
   0, 14],
  [e[24], 15],
  [2, 99, 14, {"name":"doccomment.tagGroup"},
   "*/", -1],
  [0, 13,
   0, 12],
  [[0, /^(?!\*\/)/, /^[^]/], 16,
   "*/", -1],
  [3, "keyword", e[0], 18,
   3, "keyword", e[1], 18,
   3, "keyword", e[2], 20,
   3, "keyword", e[3], 24,
   3, "keyword", e[4], 28,
   3, "keyword", e[5], 30,
   3, "keyword", e[6], 51,
   3, "keyword", e[7], 59,
   3, "keyword", e[8], 68,
   3, "keyword", e[9], 68,
   3, "keyword", e[10], 70,
   3, "keyword", e[11], 72,
   3, "keyword", e[12], 72,
   3, "keyword", e[13], 74,
   3, "keyword", e[14], 75,
   /^[a-zA-Z\¡-\￿__][a-zA-Z\¡-\￿_0-9_]*(?= *\:(?!\=))/, 74,
   2, 107, -1, {"name":"Block"},
   3, "keyword", e[15], 78,
   3, "keyword", e[16], 80,
   3, "keyword", e[17], -1,
   3, "keyword", e[14], 82,
   1, 112, 86],
  [1, 4, 19],
  [1, 126, -1],
  [1, 4, 21],
  [2, 136, -1, {"name":"Set"},
   3, "def", e[18], 22],
  [1, 4, 23],
  [1, 141, -1],
  [1, 4, 25],
  [2, 179, -1, {"name":"Set"},
   ".", 26,
   3, "def", e[18], 26,
   0, 26],
  [1, 4, 27],
  [2, 9, -1, {"name":"string","token":"string"}],
  [1, 4, 29],
  [3, "variable", e[18], -1],
  [1, 4, 31],
  [1, 184, 32],
  [1, 4, 33],
  [";", 34,
   0, 35],
  [1, 4, 36],
  [1, 4, 37],
  [1, 184, 35],
  [2, 107, 38, {"name":"Block"}],
  [1, 4, 39],
  [3, "keyword", e[19], 40,
   0, -1],
  [1, 4, 41],
  [3, "keyword", e[5], 42,
   0, 43],
  [1, 4, 44],
  [1, 4, 45],
  [1, 184, 46],
  [2, 107, 47, {"name":"Block"}],
  [1, 4, 48],
  [1, 4, 39],
  [";", 49,
   0, 43],
  [1, 4, 50],
  [1, 184, 43],
  [1, 4, 52],
  [1, 184, 53,
   0, 54],
  [1, 4, 55],
  [1, 4, 56],
  [";", 57,
   0, 54],
  [2, 107, -1, {"name":"Block"}],
  [1, 4, 58],
  [1, 184, 54,
   0, 54],
  [1, 4, 60],
  [1, 192, 61,
   1, 184, 62],
  [1, 4, 63],
  [1, 4, 64],
  [1, 184, 62],
  [";", 65,
   2, 107, -1, {"name":"Block"}],
  [1, 4, 66],
  [1, 184, 67,
   0, 67],
  [1, 4, 64],
  [1, 4, 69],
  [1, 112, -1],
  [1, 4, 71],
  [1, 199, -1],
  [1, 4, 73],
  [/^(?:[a-zA-Z\¡-\￿__][a-zA-Z\¡-\￿_0-9_]*)?/, -1],
  [1, 4, 76],
  [1, 4, 77],
  [":", -1],
  [1, 199, 74],
  [1, 4, 79],
  [2, 107, -1, {"name":"Block"}],
  [1, 4, 81],
  [e[18], -1],
  [1, 4, 83],
  [2, 17, 84, {"name":"Statement"}],
  [1, 4, 85],
  [":", -1],
  [1, 4, 87],
  [",", 88,
   0, -1],
  [1, 4, 89],
  [1, 112, 90],
  [1, 4, 87],
  ["{", 92],
  [3, "tag", e[21], 93,
   3, "tag", e[22], 94,
   2, 205, 98, {"name":"doccomment.type","token":"type"}],
  [e[20], 93,
   "{", 95,
   0, 94],
  [[0, /^(?!\}|\*\/)/, /^[^]/], 94,
   0, 98],
  [2, 205, 96, {"name":"doccomment.type","token":"type"}],
  ["}", 97],
  [e[20], 97,
   3, "def", e[23], 94,
   0, 94],
  ["}", -1],
  [3, "tag", e[21], 100,
   3, "tag", e[22], 104],
  [e[20], 100,
   "{", 101,
   0, 104],
  [2, 205, 102, {"name":"doccomment.type","token":"type"}],
  ["}", 103],
  [e[20], 103,
   3, "def", e[23], 104,
   0, 104],
  [0, 105,
   2, 91, 104, {"name":"doccomment.braced"},
   0, -1],
  [e[24], 106],
  [0, 105,
   0, 104],
  ["{", 108],
  [1, 4, 109],
  [1, 6, 110],
  [1, 4, 111],
  ["}", -1],
  [1, 192, 113,
   0, 115],
  [1, 4, 114],
  [1, 112, -1],
  [3, "operator", e[25], 116,
   3, "keyword", e[26], 116,
   [5, 206], 117,
   1, 212, 118],
  [1, 4, 115],
  [3, "type", e[18], 119],
  [1, 4, 120],
  [1, 4, 121],
  [1, 221, 122,
   2, 230, 122, {"name":"LiteralBody"},
   0, -1],
  [".", 123,
   e[32], 118],
  [1, 4, 120],
  [1, 4, 124],
  [3, "property", e[18], 125],
  [1, 4, 121],
  [2, 235, -1, {"name":"Set"},
   3, "def", e[18], 127],
  [1, 4, 128],
  [",", 129,
   1, 141, 130,
   0, 130],
  [1, 4, 131],
  [1, 4, 132],
  [3, "def", e[18], 133],
  [3, "operator", "=", 134,
   0, -1],
  [1, 4, 128],
  [1, 4, 135],
  [1, 199, -1],
  ["(", 137],
  [1, 4, 138],
  [1, 240, 139],
  [1, 4, 140],
  [")", -1],
  ["[", 142,
   3, "keyword", e[27], 148,
   3, "keyword", e[28], 150,
   "*", 152,
   3, "keyword", e[29], 154,
   3, "keyword", e[30], 158,
   3, "operator", "<-", 166,
   3, "keyword", e[31], 167,
   "(", 170,
   3, "type", e[18], 174],
  [1, 4, 143],
  [1, 112, 144,
   0, 144],
  [1, 4, 145],
  ["]", 146],
  [1, 4, 147],
  [1, 141, -1],
  [1, 4, 149],
  [2, 245, -1, {"name":"StructBody"}],
  [1, 4, 151],
  [2, 250, -1, {"name":"InterfaceBody"}],
  [1, 4, 153],
  [1, 141, -1],
  [1, 4, 155],
  [2, 255, 156, {"name":"ParamList"}],
  [1, 4, 157],
  [2, 255, -1, {"name":"ParamList"},
   1, 141, -1,
   0, -1],
  [1, 4, 159],
  ["[", 160],
  [1, 4, 161],
  [1, 141, 162],
  [1, 4, 163],
  ["]", 164],
  [1, 4, 165],
  [1, 141, -1],
  [1, 4, 168],
  [1, 4, 169],
  [1, 141, -1],
  [3, "operator", "<-", 166,
   0, 166],
  [1, 4, 171],
  [1, 141, 172],
  [1, 4, 173],
  [")", -1],
  [1, 4, 175],
  [".", 176,
   0, -1],
  [1, 4, 177],
  [3, "property", e[18], 178],
  [1, 4, 175],
  ["(", 180],
  [1, 4, 181],
  [1, 260, 182],
  [1, 4, 183],
  [")", -1],
  [1, 192, 185,
   0, 187],
  [1, 4, 186],
  [1, 112, -1],
  [3, "operator", e[25], 188,
   3, "keyword", e[26], 188,
   1, 212, 189],
  [1, 4, 187],
  [1, 4, 190],
  [1, 265, 191,
   0, -1],
  [1, 4, 190],
  [[5, 274], 193],
  [3, "def", e[18], 194],
  [1, 4, 195],
  [",", 196,
   3, "operator", ":=", -1],
  [1, 4, 197],
  [3, "def", e[18], 198],
  [1, 4, 195],
  [1, 112, 200,
   0, -1],
  [1, 4, 201],
  [",", 202,
   0, -1],
  [1, 4, 203],
  [1, 112, 204,
   0, 204],
  [1, 4, 201],
  [1, 280, -1],
  [3, "type", e[18], 207],
  [1, 4, 208],
  [".", 209,
   e[32], -1],
  [1, 4, 210],
  [3, "property", e[18], 211],
  [1, 4, 208],
  [3, "number", e[33], -1,
   2, 9, -1, {"name":"string","token":"string"},
   3, "atom", e[34], -1,
   3, "keyword", e[29], 213,
   3, "variable callee", e[37], -1,
   3, "variable", e[18], -1,
   2, 284, 217, {"name":"Bracketed"},
   "*", 219,
   2, 292, -1, {"name":"ParenExpr"}],
  [1, 4, 214],
  [3, "def", e[18], 215,
   0, 215],
  [1, 4, 216],
  [2, 297, -1, {"name":"FunctionDef"}],
  [1, 4, 218],
  [1, 141, -1,
   0, -1],
  [1, 4, 220],
  [1, 141, -1],
  [".(", 222,
   ".", 226,
   3, "operator", e[35], -1,
   3, "operator", e[36], 228,
   2, 302, -1, {"name":"ArgList"},
   2, 284, -1, {"name":"Bracketed"}],
  [1, 4, 223],
  [1, 141, 224],
  [1, 4, 225],
  [")", -1],
  [1, 4, 227],
  [3, "property callee", e[37], -1,
   3, "property", e[18], -1],
  [1, 4, 229],
  [1, 112, -1],
  ["{", 231],
  [1, 4, 232],
  [1, 309, 233],
  [1, 4, 234],
  ["}", -1],
  ["(", 236],
  [1, 4, 237],
  [1, 323, 238],
  [1, 4, 239],
  [")", -1],
  [/^[ \t]/, 240,
   2, 11, 240, {"name":"comment","token":"comment"},
   "\n", 240,
   0, 241],
  [3, "def", e[18], 242,
   0, -1],
  [1, 4, 243],
  [1, 141, 244],
  [/^[ \t]/, 244,
   2, 11, 244, {"name":"comment","token":"comment"},
   e[38], 244,
   0, 241],
  ["{", 246],
  [1, 4, 247],
  [1, 335, 248],
  [1, 4, 249],
  ["}", -1],
  ["{", 251],
  [1, 4, 252],
  [1, 347, 253],
  [1, 4, 254],
  ["}", -1],
  ["(", 256],
  [1, 4, 257],
  [1, 352, 258],
  [1, 4, 259],
  [")", -1],
  [/^[ \t]/, 260,
   2, 11, 260, {"name":"comment","token":"comment"},
   "\n", 260,
   0, 261],
  [".", 262,
   3, "def", e[18], 262,
   0, 262,
   0, -1],
  [1, 4, 263],
  [2, 9, 264, {"name":"string","token":"string"}],
  [/^[ \t]/, 264,
   2, 11, 264, {"name":"comment","token":"comment"},
   e[38], 264,
   0, 261],
  [".(", 266,
   ".", 270,
   3, "operator", e[35], -1,
   3, "operator", e[36], 272,
   2, 302, -1, {"name":"ArgList"},
   2, 284, -1, {"name":"Bracketed"}],
  [1, 4, 267],
  [1, 141, 268],
  [1, 4, 269],
  [")", -1],
  [1, 4, 271],
  [3, "property callee", e[37], -1,
   3, "property", e[18], -1],
  [1, 4, 273],
  [1, 184, -1],
  [e[18], 275],
  [1, 4, 276],
  [",", 277,
   ":=", -1],
  [1, 4, 278],
  [e[18], 279],
  [1, 4, 276],
  [/^(?!\}|\*\/)/, 281,
   0, -1],
  ["{", 282,
   /^[^]/, 280],
  [1, 280, 283],
  [/^\}?/, 280],
  ["[", 285],
  [1, 4, 286],
  [1, 199, 287],
  [1, 4, 288],
  [":", 289,
   "]", -1],
  [1, 4, 290],
  [1, 112, 291,
   0, 291],
  [1, 4, 288],
  ["(", 293],
  [1, 4, 294],
  [1, 199, 295],
  [1, 4, 296],
  [")", -1],
  [2, 255, 298, {"name":"ParamList"}],
  [1, 4, 299],
  [2, 255, 300, {"name":"ParamList"},
   1, 141, 300,
   0, 300],
  [1, 4, 301],
  [2, 107, -1, {"name":"Block"},
   0, -1],
  ["(", 303],
  [1, 4, 304],
  [1, 199, 305],
  [1, 4, 306],
  [e[40], 307],
  [1, 4, 308],
  [")", -1],
  [3, "property", e[39], 310,
   1, 112, 310,
   0, -1],
  [1, 4, 311],
  [":", 312,
   0, 313],
  [1, 4, 314],
  [1, 4, 315],
  [1, 112, 313],
  [",", 316,
   0, -1],
  [1, 4, 317],
  [3, "property", e[39], 318,
   1, 112, 318,
   0, 319],
  [1, 4, 320],
  [1, 4, 315],
  [":", 321,
   0, 319],
  [1, 4, 322],
  [1, 112, 319],
  [/^[ \t]/, 323,
   2, 11, 323, {"name":"comment","token":"comment"},
   "\n", 323,
   0, 324],
  [3, "def", e[18], 325,
   0, -1],
  [1, 4, 326],
  [",", 327,
   1, 141, 328,
   0, 328],
  [1, 4, 329],
  [1, 4, 330],
  [3, "def", e[18], 331],
  [3, "operator", "=", 332,
   0, 333],
  [1, 4, 326],
  [1, 4, 334],
  [/^[ \t]/, 333,
   2, 11, 333, {"name":"comment","token":"comment"},
   e[38], 333,
   0, 324],
  [1, 199, 333],
  [/^[ \t]/, 335,
   2, 11, 335, {"name":"comment","token":"comment"},
   "\n", 335,
   0, 336],
  [3, "property", e[18], 337,
   "*", 338,
   0, -1],
  [1, 4, 339],
  [1, 4, 340],
  [",", 341,
   0, 338],
  [1, 141, 342],
  [1, 4, 343],
  [1, 4, 344],
  [3, "property", e[18], 345],
  [2, 9, 346, {"name":"string","token":"string"},
   0, 346],
  [1, 4, 339],
  [/^[ \t]/, 346,
   2, 11, 346, {"name":"comment","token":"comment"},
   e[38], 346,
   0, 336],
  [/^[ \t]/, 347,
   2, 11, 347, {"name":"comment","token":"comment"},
   "\n", 347,
   0, 348],
  [3, "property", /^[a-zA-Z\¡-\￿__][a-zA-Z\¡-\￿_0-9_]*(?= \()/, 349,
   1, 141, 350,
   0, -1],
  [1, 4, 351],
  [/^[ \t]/, 350,
   2, 11, 350, {"name":"comment","token":"comment"},
   e[38], 350,
   0, 348],
  [2, 255, 350, {"name":"ParamList"}],
  [3, "def", e[18], 353,
   0, 354,
   0, -1],
  [1, 4, 355],
  [1, 4, 356],
  [",", 357,
   0, 354],
  [e[40], 358],
  [1, 4, 359],
  [1, 4, 360],
  [3, "def", e[18], 361],
  [1, 141, 362,
   0, 362],
  [1, 4, 355],
  [1, 4, 363],
  [",", 364,
   0, -1],
  [1, 4, 365],
  [3, "def", e[18], 366,
   0, 367,
   0, 368],
  [1, 4, 369],
  [1, 4, 370],
  [1, 4, 363],
  [",", 371,
   0, 367],
  [e[40], 372],
  [1, 4, 373],
  [1, 4, 374],
  [3, "def", e[18], 375],
  [1, 141, 368,
   0, 368],
  [1, 4, 369]
];
var start = 0;
var token = 3;


var grammar = Object.freeze({
	nodes: nodes,
	start: start,
	token: token
});

function storeLocal(context, name, scopes) {
  for (var cx = context; cx; cx = cx.parent)
    { if (scopes.indexOf(cx.name) > -1)
      { return (cx.locals || (cx.locals = [])).push(name) } }
}
function isLocal(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
  return false
}

var varRE = /(^|\s)variable($|\s)/;

function markLocals(type, scopes, stream, state) {
  if (type == "def")
    { storeLocal(state.context, stream.current(), scopes); }
  else if (varRE.test(type) && !/qualified/.test(type) &&
           isLocal(state.context, stream.current()))
    { type = type.replace(varRE, "$1variable-2$2"); }
  return type
}

var scopes = ["Block", "FunctionDef"];
var allowNewline = ["LiteralBody", "Bracketed", "ArgList", "ParamList", "ParenExpr"];

function skippableNewline(line, pos, cx) {
  if (cx && allowNewline.indexOf(cx.name) > -1) { return true }
  var match = /(?:(\w+)|[\d"'\)\]\}:]|\+\+|--)\s*(?:\/\/.*)?$/.exec(line.slice(0, pos));
  return !match ||
    (match[1] ? /^(?:func|interface|select|case|defer|go|map|struct|chan|else|goto|package|switch|const|if|range|type|for|import|var)$/.test(match[1]) : false)
}

var bracketed = {
  Block: "}", LiteralBody: "}", StructBody: "}", InterfaceBody: "}",
  Bracketed: "]",
  Set: ")", ParamList: ")", ArgList: ")", ParenExpr: ")"
};

function findIndent(cx, textAfter, curLine, config) {
  if (!cx) { return 0 }
  if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

  var brack = bracketed[cx.name];
  if (brack) {
    var closed = textAfter && textAfter.charAt(0) == brack;
    var flat = closed || curLine == cx.startLine;
    if (cx.name == "Block") {
      curLine = cx.parent.startLine;
      if (/^(case|default)\b/.test(textAfter)) { flat = true; }
    } else {
      curLine = cx.startLine;
    }
    return findIndent(cx.parent, closed ? null : textAfter, curLine, config) + (flat ? 0 : config.tabSize)
  } else if (cx.name == "Statement") {
    return CodeMirror.countColumn(cx.startLine, null, config.tabSize) +
      (curLine == cx.startLine ? 0 : config.tabSize)
  } else {
    return findIndent(cx.parent, textAfter, curLine, config)
  }
}

var GoMode = (function (superclass) {
  function GoMode(conf) {
    superclass.call(this, grammar, {
      predicates: {skippableNewline: skippableNewline}
    });
    this.conf = conf;
  }

  if ( superclass ) GoMode.__proto__ = superclass;
  GoMode.prototype = Object.create( superclass && superclass.prototype );
  GoMode.prototype.constructor = GoMode;

  GoMode.prototype.token = function token$$1 (stream, state) {
    return markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state)
  };

  GoMode.prototype.indent = function indent (state, textAfter, line) {
    return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, null, this.conf)
  };

  return GoMode;
}(CodeMirror.GrammarMode));

GoMode.prototype.electricInput = /^\s*(?:case .*?:|default:|\{\}?|\})$/;
GoMode.prototype.closeBrackets = "()[]{}''\"\"``";
GoMode.prototype.blockCommentStart = "/*";
GoMode.prototype.blockCommentEnd = "*/";
GoMode.prototype.blockCommentContinue = " * ";
GoMode.prototype.lineComment = "//";
GoMode.prototype.fold = "brace";

CodeMirror.defineMode("google-go", function (conf) { return new GoMode(conf); });

})));
