(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
	typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
	(factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

var e = [/^const(?![a-zA-Z¡-￿_0-9_])/, /^var(?![a-zA-Z¡-￿_0-9_])/, /^type(?![a-zA-Z¡-￿_0-9_])/, /^import(?![a-zA-Z¡-￿_0-9_])/, /^package(?![a-zA-Z¡-￿_0-9_])/, /^func(?![a-zA-Z¡-￿_0-9_])/, /^go(?![a-zA-Z¡-￿_0-9_])/, /^defer(?![a-zA-Z¡-￿_0-9_])/, /^return(?![a-zA-Z¡-￿_0-9_])/, /^break(?![a-zA-Z¡-￿_0-9_])/, /^continue(?![a-zA-Z¡-￿_0-9_])/, /^default(?![a-zA-Z¡-￿_0-9_])/, /^case(?![a-zA-Z¡-￿_0-9_])/, /^select(?![a-zA-Z¡-￿_0-9_])/, /^goto(?![a-zA-Z¡-￿_0-9_])/, /^fallthrough(?![a-zA-Z¡-￿_0-9_])/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*/, [1, "\n", "\t", " "], /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z¡-￿_])/, /^\@[a-zA-Z¡-￿_]+/, /^[a-zA-Z¡-￿_]+/, [0, /^(?!\*\/|\@[a-zA-Z¡-￿_]|\{)/, /^[^]/], /^if(?![a-zA-Z¡-￿_0-9_])/, /^else(?![a-zA-Z¡-￿_0-9_])/, /^switch(?![a-zA-Z¡-￿_0-9_])/, /^for(?![a-zA-Z¡-￿_0-9_])/, /^(?:\!|\+|\-|\*|\^|\&|\<\-)/, /^range(?![a-zA-Z¡-￿_0-9_])/, /^struct(?![a-zA-Z¡-￿_0-9_])/, /^interface(?![a-zA-Z¡-￿_0-9_])/, /^map(?![a-zA-Z¡-￿_0-9_])/, /^chan(?![a-zA-Z¡-￿_0-9_])/, /^(?=\{)/, /^(?:(?:0o|0O)[0-7]+|(?:0x|OX)[0-9a-fA-F]+|(?:[0-9]+(?:\.[0-9]+)?|\.[0-9]+)(?:[eE][\+\-]?[0-9]+)?i?)/, /^(?:true|false|nil|iota)(?![a-zA-Z¡-￿_0-9_])/, /^make(?![a-zA-Z¡-￿_0-9_])/, /^(?:append|cap|close|complex|copy|delete|imag|len|new|panic|print|println|real|recover)(?![a-zA-Z¡-￿_0-9_])/, /^(?:\+\+|\-\-)/, /^(?:(?:\+|\&\^?|\-|\||\*|\^|\/|\<\<?|\>\>?|\%|\=)\=?|\<\-|\=|\:\=|\!\=)/, /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?=\()/, [1, ";", "\n"], /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= \:)/, /^(?:\.\.\.)?/];
var nodes = [
  [1, 4, 2],
  [/^[^]/, 0],
  [1, 6, 1],
  [3, "keyword", e[9], -1,
   3, "keyword", e[11], -1,
   3, "keyword", e[5], -1,
   3, "keyword", e[29], -1,
   3, "keyword", e[13], -1,
   3, "keyword", e[12], -1,
   3, "keyword", e[7], -1,
   3, "keyword", e[6], -1,
   3, "keyword", e[30], -1,
   3, "keyword", e[28], -1,
   3, "keyword", e[31], -1,
   3, "keyword", e[23], -1,
   3, "keyword", e[14], -1,
   3, "keyword", e[4], -1,
   3, "keyword", e[24], -1,
   3, "keyword", e[0], -1,
   3, "keyword", e[15], -1,
   3, "keyword", e[22], -1,
   3, "keyword", e[27], -1,
   3, "keyword", e[2], -1,
   3, "keyword", e[10], -1,
   3, "keyword", e[25], -1,
   3, "keyword", e[3], -1,
   3, "keyword", e[8], -1,
   3, "keyword", e[1], -1,
   3, "builtin", e[35], -1,
   3, "atom", e[34], -1,
   3, "builtin", e[36], -1,
   3, "operator", e[38], -1,
   3, "operator", e[26], -1,
   3, "operator", e[37], -1,
   3, "number", e[33], -1,
   2, 9, -1, {"name":"string","token":"string"},
   3, "variable", e[16], -1,
   2, 11, -1, {"name":"comment","token":"comment"},
   /^[^]/, -1],
  [/^[ \t]/, 4,
   2, 11, 4, {"name":"comment","token":"comment"},
   [0, /^(?=\n)/, [7, "skippableNewline"]], 5,
   0, -1],
  ["\n", 4],
  [/^[ \t]/, 6,
   2, 11, 6, {"name":"comment","token":"comment"},
   "\n", 6,
   0, 7],
  [2, 17, 8, {"name":"Statement"},
   0, -1],
  [/^[ \t]/, 8,
   2, 11, 8, {"name":"comment","token":"comment"},
   e[40], 8,
   0, 7],
  [/^(?:\'(?:\\.(?:(?!\').)*|.)\'|\"(?:\\.|(?!\").)*\")/, -1,
   "`", 10],
  [[0, /^(?!\`)/, /^[^]/], 10,
   "`", -1],
  [/^\/\*\*(?!\/)/, 12,
   "/*", 16,
   /^\/\/.*/, -1],
  [0, 13,
   2, 55, 12, {"name":"doccomment.braced"},
   0, 14],
  [e[21], 15],
  [2, 63, 14, {"name":"doccomment.tagGroup"},
   "*/", -1],
  [0, 13,
   0, 12],
  [[0, /^(?!\*\/)/, /^[^]/], 16,
   "*/", -1],
  [3, "keyword", e[0], 18,
   3, "keyword", e[1], 18,
   3, "keyword", e[2], 20,
   3, "keyword", e[3], 24,
   3, "keyword", e[4], 28,
   2, 71, -1, {"name":"IfStatement"},
   2, 93, -1, {"name":"SwitchStatement"},
   2, 102, -1, {"name":"ForStatement"},
   3, "keyword", e[5], 30,
   3, "keyword", e[6], 32,
   3, "keyword", e[7], 32,
   3, "keyword", e[8], 34,
   3, "keyword", e[9], 36,
   3, "keyword", e[10], 36,
   3, "keyword", e[11], 38,
   3, "keyword", e[12], 39,
   /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= *\:(?!\=))/, 38,
   2, 112, -1, {"name":"Block"},
   3, "keyword", e[13], 42,
   3, "keyword", e[14], 44,
   3, "keyword", e[15], -1,
   3, "keyword", e[12], 46,
   1, 117, 50],
  [1, 4, 19],
  [1, 128, -1],
  [1, 4, 21],
  [2, 138, -1, {"name":"Set"},
   3, "def", e[16], 22],
  [1, 4, 23],
  [1, 143, -1],
  [1, 4, 25],
  [2, 178, -1, {"name":"Set"},
   ".", 26,
   3, "def", e[16], 26,
   0, 26],
  [1, 4, 27],
  [2, 9, -1, {"name":"string","token":"string"}],
  [1, 4, 29],
  [3, "variable", e[16], -1],
  [1, 4, 31],
  [2, 183, -1, {"name":"FunctionDecl"}],
  [1, 4, 33],
  [1, 117, -1],
  [1, 4, 35],
  [1, 198, -1],
  [1, 4, 37],
  [/^(?:[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*)?/, -1],
  [1, 4, 40],
  [1, 4, 41],
  [":", -1],
  [1, 198, 38],
  [1, 4, 43],
  [2, 112, -1, {"name":"Block"}],
  [1, 4, 45],
  [e[16], -1],
  [1, 4, 47],
  [2, 17, 48, {"name":"Statement"}],
  [1, 4, 49],
  [":", -1],
  [1, 4, 51],
  [",", 52,
   0, -1],
  [1, 4, 53],
  [1, 117, 54],
  [1, 4, 51],
  ["{", 56],
  [3, "tag", e[18], 57,
   3, "tag", e[19], 58,
   2, 204, 62, {"name":"doccomment.type","token":"type"}],
  [e[17], 57,
   "{", 59,
   0, 58],
  [[0, /^(?!\}|\*\/)/, /^[^]/], 58,
   0, 62],
  [2, 204, 60, {"name":"doccomment.type","token":"type"}],
  ["}", 61],
  [e[17], 61,
   3, "def", e[20], 58,
   0, 58],
  ["}", -1],
  [3, "tag", e[18], 64,
   3, "tag", e[19], 68],
  [e[17], 64,
   "{", 65,
   0, 68],
  [2, 204, 66, {"name":"doccomment.type","token":"type"}],
  ["}", 67],
  [e[17], 67,
   3, "def", e[20], 68,
   0, 68],
  [0, 69,
   2, 55, 68, {"name":"doccomment.braced"},
   0, -1],
  [e[21], 70],
  [0, 69,
   0, 68],
  [3, "keyword", e[22], 72],
  [1, 4, 73],
  [1, 205, 74],
  [1, 4, 75],
  [";", 76,
   0, 78],
  [1, 4, 77],
  [1, 205, 78],
  [1, 4, 79],
  [2, 112, 80, {"name":"Block"}],
  [1, 4, 81],
  [3, "keyword", e[23], 82,
   0, -1],
  [1, 4, 83],
  [3, "keyword", e[22], 84,
   0, 85],
  [1, 4, 86],
  [1, 4, 87],
  [1, 205, 88],
  [2, 112, 89, {"name":"Block"}],
  [1, 4, 90],
  [1, 4, 81],
  [";", 91,
   0, 85],
  [1, 4, 92],
  [1, 205, 85],
  [3, "keyword", e[24], 94],
  [1, 4, 95],
  [1, 205, 96,
   0, 100],
  [1, 4, 97],
  [";", 98,
   0, 100],
  [1, 4, 99],
  [1, 205, 100,
   0, 100],
  [1, 4, 101],
  [2, 112, -1, {"name":"Block"}],
  [3, "keyword", e[25], 103],
  [1, 4, 104],
  [1, 213, 105,
   1, 205, 107],
  [1, 4, 106],
  [1, 205, 107],
  [1, 4, 108],
  [";", 109,
   2, 112, -1, {"name":"Block"}],
  [1, 4, 110],
  [1, 205, 111,
   0, 111],
  [1, 4, 108],
  ["{", 113],
  [1, 4, 114],
  [1, 6, 115],
  [1, 4, 116],
  ["}", -1],
  [1, 213, 118,
   0, 120],
  [1, 4, 119],
  [1, 117, -1],
  [3, "operator", e[26], 121,
   3, "keyword", e[27], 121,
   [5, 220], 122,
   1, 223, 123],
  [1, 4, 120],
  [1, 143, 124],
  [1, 4, 125],
  [1, 4, 126],
  [1, 232, 127,
   2, 241, 127, {"name":"LiteralBody"},
   0, -1],
  [e[32], 123],
  [1, 4, 125],
  [2, 246, -1, {"name":"Set"},
   3, "def", e[16], 129],
  [1, 4, 130],
  [",", 131,
   1, 143, 132,
   0, 132],
  [1, 4, 133],
  [1, 4, 134],
  [3, "def", e[16], 135],
  [3, "operator", "=", 136,
   0, -1],
  [1, 4, 130],
  [1, 4, 137],
  [1, 198, -1],
  ["(", 139],
  [1, 4, 140],
  [1, 251, 141],
  [1, 4, 142],
  [")", -1],
  ["[", 144,
   3, "keyword", e[28], 150,
   3, "keyword", e[29], 152,
   "*", 154,
   3, "keyword", e[5], 156,
   3, "keyword", e[30], 160,
   3, "operator", "<-", 168,
   3, "keyword", e[31], 169,
   "(", 172,
   0, 176],
  [1, 4, 145],
  [1, 117, 146,
   0, 146],
  [1, 4, 147],
  ["]", 148],
  [1, 4, 149],
  [1, 143, -1],
  [1, 4, 151],
  [2, 256, -1, {"name":"StructBody"}],
  [1, 4, 153],
  [2, 261, -1, {"name":"InterfaceBody"}],
  [1, 4, 155],
  [1, 143, -1],
  [1, 4, 157],
  [2, 266, 158, {"name":"ParamList"}],
  [1, 4, 159],
  [2, 266, -1, {"name":"ParamList"},
   1, 143, -1,
   0, -1],
  [1, 4, 161],
  ["[", 162],
  [1, 4, 163],
  [1, 143, 164],
  [1, 4, 165],
  ["]", 166],
  [1, 4, 167],
  [1, 143, -1],
  [1, 4, 170],
  [1, 4, 171],
  [1, 143, -1],
  [3, "operator", "<-", 168,
   0, 168],
  [1, 4, 173],
  [1, 143, 174],
  [1, 4, 175],
  [")", -1],
  [3, "meta", /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*\./, 177,
   3, "type", e[16], -1],
  [1, 4, 176],
  ["(", 179],
  [1, 4, 180],
  [1, 271, 181],
  [1, 4, 182],
  [")", -1],
  ["(", 184,
   0, 190],
  [1, 4, 185],
  [3, "def", e[16], 186],
  [1, 4, 187],
  [1, 143, 188],
  [1, 4, 189],
  [")", 190],
  [1, 4, 191],
  [3, "def", e[16], 192,
   0, 192],
  [1, 4, 193],
  [2, 266, 194, {"name":"ParamList"}],
  [1, 4, 195],
  [2, 266, 196, {"name":"ParamList"},
   1, 143, 196,
   0, 196],
  [1, 4, 197],
  [2, 112, -1, {"name":"Block"},
   0, -1],
  [1, 117, 199,
   0, -1],
  [1, 4, 200],
  [",", 201,
   0, -1],
  [1, 4, 202],
  [1, 117, 203,
   0, 203],
  [1, 4, 200],
  [1, 276, -1],
  [1, 213, 206,
   0, 208],
  [1, 4, 207],
  [1, 117, -1],
  [3, "operator", e[26], 209,
   3, "keyword", e[27], 209,
   1, 223, 210],
  [1, 4, 208],
  [1, 4, 211],
  [1, 280, 212,
   0, -1],
  [1, 4, 211],
  [[5, 289], 214],
  [3, "def", e[16], 215],
  [1, 4, 216],
  [",", 217,
   3, "operator", ":=", -1],
  [1, 4, 218],
  [3, "def", e[16], 219],
  [1, 4, 216],
  [1, 143, 221],
  [1, 4, 222],
  [e[32], -1],
  [3, "number", e[33], -1,
   2, 9, -1, {"name":"string","token":"string"},
   3, "atom", e[34], -1,
   3, "keyword", e[5], 224,
   3, "builtin", e[35], 226,
   3, "builtin", e[36], -1,
   3, "variable callee", e[39], -1,
   3, "variable", e[16], -1,
   2, 295, 228, {"name":"Bracketed"},
   "*", 230,
   2, 303, -1, {"name":"ParenExpr"}],
  [1, 4, 225],
  [2, 308, -1, {"name":"FunctionExpr"}],
  [1, 4, 227],
  [2, 313, -1, {"name":"TypeList"}],
  [1, 4, 229],
  [1, 143, -1,
   0, -1],
  [1, 4, 231],
  [1, 143, -1],
  [".(", 233,
   ".", 237,
   3, "operator", e[37], -1,
   3, "operator", e[38], 239,
   2, 318, -1, {"name":"ArgList"},
   2, 295, -1, {"name":"Bracketed"}],
  [1, 4, 234],
  [1, 143, 235],
  [1, 4, 236],
  [")", -1],
  [1, 4, 238],
  [3, "property callee", e[39], -1,
   3, "property", e[16], -1],
  [1, 4, 240],
  [1, 117, -1],
  ["{", 242],
  [1, 4, 243],
  [1, 325, 244],
  [1, 4, 245],
  ["}", -1],
  ["(", 247],
  [1, 4, 248],
  [1, 339, 249],
  [1, 4, 250],
  [")", -1],
  [/^[ \t]/, 251,
   2, 11, 251, {"name":"comment","token":"comment"},
   "\n", 251,
   0, 252],
  [3, "def", e[16], 253,
   0, -1],
  [1, 4, 254],
  [1, 143, 255],
  [/^[ \t]/, 255,
   2, 11, 255, {"name":"comment","token":"comment"},
   e[40], 255,
   0, 252],
  ["{", 257],
  [1, 4, 258],
  [1, 351, 259],
  [1, 4, 260],
  ["}", -1],
  ["{", 262],
  [1, 4, 263],
  [1, 363, 264],
  [1, 4, 265],
  ["}", -1],
  ["(", 267],
  [1, 4, 268],
  [1, 368, 269],
  [1, 4, 270],
  [")", -1],
  [/^[ \t]/, 271,
   2, 11, 271, {"name":"comment","token":"comment"},
   "\n", 271,
   0, 272],
  [".", 273,
   3, "def", e[16], 273,
   0, 273,
   0, -1],
  [1, 4, 274],
  [2, 9, 275, {"name":"string","token":"string"}],
  [/^[ \t]/, 275,
   2, 11, 275, {"name":"comment","token":"comment"},
   e[40], 275,
   0, 272],
  [/^(?!\}|\*\/)/, 277,
   0, -1],
  ["{", 278,
   /^[^]/, 276],
  [1, 276, 279],
  [/^\}?/, 276],
  [".(", 281,
   ".", 285,
   3, "operator", e[37], -1,
   3, "operator", e[38], 287,
   2, 318, -1, {"name":"ArgList"},
   2, 295, -1, {"name":"Bracketed"}],
  [1, 4, 282],
  [1, 143, 283],
  [1, 4, 284],
  [")", -1],
  [1, 4, 286],
  [3, "property callee", e[39], -1,
   3, "property", e[16], -1],
  [1, 4, 288],
  [1, 205, -1],
  [e[16], 290],
  [1, 4, 291],
  [",", 292,
   ":=", -1],
  [1, 4, 293],
  [e[16], 294],
  [1, 4, 291],
  ["[", 296],
  [1, 4, 297],
  [1, 198, 298],
  [1, 4, 299],
  [":", 300,
   "]", -1],
  [1, 4, 301],
  [1, 117, 302,
   0, 302],
  [1, 4, 299],
  ["(", 304],
  [1, 4, 305],
  [1, 198, 306],
  [1, 4, 307],
  [")", -1],
  [2, 266, 309, {"name":"ParamList"}],
  [1, 4, 310],
  [2, 266, 311, {"name":"ParamList"},
   1, 143, 311,
   0, 311],
  [1, 4, 312],
  [2, 112, -1, {"name":"Block"}],
  ["(", 314],
  [1, 4, 315],
  [1, 392, 316],
  [1, 4, 317],
  [")", -1],
  ["(", 319],
  [1, 4, 320],
  [1, 198, 321],
  [1, 4, 322],
  [e[42], 323],
  [1, 4, 324],
  [")", -1],
  [3, "property", e[41], 326,
   1, 117, 326,
   0, -1],
  [1, 4, 327],
  [":", 328,
   0, 329],
  [1, 4, 330],
  [1, 4, 331],
  [1, 117, 329],
  [",", 332,
   0, -1],
  [1, 4, 333],
  [3, "property", e[41], 334,
   1, 117, 334,
   0, 335],
  [1, 4, 336],
  [1, 4, 331],
  [":", 337,
   0, 335],
  [1, 4, 338],
  [1, 117, 335],
  [/^[ \t]/, 339,
   2, 11, 339, {"name":"comment","token":"comment"},
   "\n", 339,
   0, 340],
  [3, "def", e[16], 341,
   0, -1],
  [1, 4, 342],
  [",", 343,
   1, 143, 344,
   0, 344],
  [1, 4, 345],
  [1, 4, 346],
  [3, "def", e[16], 347],
  [3, "operator", "=", 348,
   0, 349],
  [1, 4, 342],
  [1, 4, 350],
  [/^[ \t]/, 349,
   2, 11, 349, {"name":"comment","token":"comment"},
   e[40], 349,
   0, 340],
  [1, 198, 349],
  [/^[ \t]/, 351,
   2, 11, 351, {"name":"comment","token":"comment"},
   "\n", 351,
   0, 352],
  [3, "def", e[16], 353,
   "*", 354,
   0, -1],
  [1, 4, 355],
  [1, 4, 356],
  [",", 357,
   0, 354],
  [1, 143, 358],
  [1, 4, 359],
  [1, 4, 360],
  [3, "def", e[16], 361],
  [2, 9, 362, {"name":"string","token":"string"},
   0, 362],
  [1, 4, 355],
  [/^[ \t]/, 362,
   2, 11, 362, {"name":"comment","token":"comment"},
   e[40], 362,
   0, 352],
  [/^[ \t]/, 363,
   2, 11, 363, {"name":"comment","token":"comment"},
   "\n", 363,
   0, 364],
  [3, "property", /^[a-zA-Z¡-￿__][a-zA-Z¡-￿_0-9_]*(?= \()/, 365,
   1, 143, 366,
   0, -1],
  [1, 4, 367],
  [/^[ \t]/, 366,
   2, 11, 366, {"name":"comment","token":"comment"},
   e[40], 366,
   0, 364],
  [2, 266, 366, {"name":"ParamList"}],
  [3, "def", e[16], 369,
   0, 370,
   0, -1],
  [1, 4, 371],
  [1, 4, 372],
  [",", 373,
   0, 370],
  [e[42], 374],
  [1, 4, 375],
  [1, 4, 376],
  [3, "def", e[16], 377],
  [1, 143, 378,
   0, 378],
  [1, 4, 371],
  [1, 4, 379],
  [",", 380,
   0, -1],
  [1, 4, 381],
  [3, "def", e[16], 382,
   0, 383,
   0, 384],
  [1, 4, 385],
  [1, 4, 386],
  [1, 4, 379],
  [",", 387,
   0, 383],
  [e[42], 388],
  [1, 4, 389],
  [1, 4, 390],
  [3, "def", e[16], 391],
  [1, 143, 384,
   0, 384],
  [1, 4, 385],
  [1, 143, 393,
   0, -1],
  [1, 4, 394],
  [",", 395,
   0, -1],
  [1, 4, 396],
  [1, 143, 397,
   0, 397],
  [1, 4, 394]
];
var start = 0;
var token = 3;


var grammar = Object.freeze({
	nodes: nodes,
	start: start,
	token: token
});

function getScope(context, scopes) {
  for (var cx = context; cx; cx = cx.parent)
    { if (scopes.indexOf(cx.name) > -1) { return cx } }
}
function isLocal(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
  return false
}
var varRE = /(^|\s)variable($|\s)/;

function markLocals(type, scopes, stream, state, once) {
  if (type == "def") {
    var scope = getScope(state.context, scopes), name = stream.current();
    if (scope) {
      if (!scope.locals) { scope.locals = []; }
      if (once && scope.locals.indexOf(name) > -1)
        { return "variable-2" }
      scope.locals.push(name);
    }
  } else if (varRE.test(type) && !/qualified/.test(type) &&
             isLocal(state.context, stream.current())) {
    type = type.replace(varRE, "$1variable-2$2");
  }
  return type
}

var scopes = ["Block", "FunctionDecl", "FunctionExpr", "IfStatement", "ForStatement", "SwitchStatement"];
var allowNewline = ["LiteralBody", "Bracketed", "ArgList", "ParamList", "ParenExpr"];

function skippableNewline(line, pos, cx) {
  if (cx && allowNewline.indexOf(cx.name) > -1) { return true }
  var match = /(?:(\w+)|[\d"'\)\]\}:]|\+\+|--)\s*(?:\/\/.*)?$/.exec(line.slice(0, pos));
  return !match ||
    (match[1] ? /^(?:func|interface|select|case|defer|go|map|struct|chan|else|goto|package|switch|const|if|range|type|for|import|var)$/.test(match[1]) : false)
}

var bracketed = {
  Block: "}", LiteralBody: "}", StructBody: "}", InterfaceBody: "}",
  Bracketed: "]",
  Set: ")", ParamList: ")", ArgList: ")", ParenExpr: ")"
};

function findIndent(cx, textAfter, curLine, config) {
  if (!cx) { return 0 }
  if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

  var brack = bracketed[cx.name];
  if (brack) {
    var closed = textAfter && textAfter.charAt(0) == brack;
    var flat = closed || curLine == cx.startLine;
    if (cx.name == "Block") {
      curLine = cx.parent.startLine;
      if (/^(case|default)\b/.test(textAfter)) { flat = true; }
    } else {
      curLine = cx.startLine;
    }
    return findIndent(cx.parent, closed ? null : textAfter, curLine, config) + (flat ? 0 : config.tabSize)
  } else if (cx.name == "Statement") {
    return CodeMirror.countColumn(cx.startLine, null, config.tabSize) +
      (curLine == cx.startLine ? 0 : config.tabSize)
  } else {
    return findIndent(cx.parent, textAfter, curLine, config)
  }
}

var GoMode = (function (superclass) {
  function GoMode(conf) {
    superclass.call(this, grammar, {
      predicates: {skippableNewline: skippableNewline}
    });
    this.conf = conf;
  }

  if ( superclass ) GoMode.__proto__ = superclass;
  GoMode.prototype = Object.create( superclass && superclass.prototype );
  GoMode.prototype.constructor = GoMode;

  GoMode.prototype.token = function token$$1 (stream, state) {
    return markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state)
  };

  GoMode.prototype.indent = function indent (state, textAfter, line) {
    return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, null, this.conf)
  };

  return GoMode;
}(CodeMirror.GrammarMode));

GoMode.prototype.electricInput = /^\s*(?:case .*?:|default:|\{\}?|\})$/;
GoMode.prototype.closeBrackets = "()[]{}''\"\"``";
GoMode.prototype.blockCommentStart = "/*";
GoMode.prototype.blockCommentEnd = "*/";
GoMode.prototype.blockCommentContinue = " * ";
GoMode.prototype.lineComment = "//";
GoMode.prototype.fold = "brace";

CodeMirror.defineMode("google-go", function (conf) { return new GoMode(conf); });

})));
