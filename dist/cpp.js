(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
	typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
	(factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

var e = [/^class(?![a-zA-Z\¡-\￿_0-9])/, /^(?:struct|union)(?![a-zA-Z\¡-\￿_0-9])/, /^namespace(?![a-zA-Z\¡-\￿_0-9])/, /^throw(?![a-zA-Z\¡-\￿_0-9])/, /^try(?![a-zA-Z\¡-\￿_0-9])/, /^asm(?![a-zA-Z\¡-\￿_0-9])/, /^using(?![a-zA-Z\¡-\￿_0-9])/, /^enum(?![a-zA-Z\¡-\￿_0-9])/, /^for(?![a-zA-Z\¡-\￿_0-9])/, /^while(?![a-zA-Z\¡-\￿_0-9])/, /^do(?![a-zA-Z\¡-\￿_0-9])/, /^if(?![a-zA-Z\¡-\￿_0-9])/, /^switch(?![a-zA-Z\¡-\￿_0-9])/, /^(?:break|continue)(?![a-zA-Z\¡-\￿_0-9])/, /^goto(?![a-zA-Z\¡-\￿_0-9])/, /^return(?![a-zA-Z\¡-\￿_0-9])/, /^default(?![a-zA-Z\¡-\￿_0-9])/, /^case(?![a-zA-Z\¡-\￿_0-9])/, /^alignas(?![a-zA-Z\¡-\￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)[LlUuFf]?/, /^virtual(?![a-zA-Z\¡-\￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z\¡-\￿_0-9])/, /^catch(?![a-zA-Z\¡-\￿_0-9])/, /^typename(?![a-zA-Z\¡-\￿_0-9])/, /^else(?![a-zA-Z\¡-\￿_0-9])/, /^(?:\:\:|[a-zA-Z\¡-\￿_][a-zA-Z\¡-\￿_0-9]* *\:\:)/, /^[a-zA-Z\¡-\￿_][a-zA-Z\¡-\￿_0-9]*(?=\<)/, /^export(?![a-zA-Z\¡-\￿_0-9])/, /^template(?![a-zA-Z\¡-\￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr)(?![a-zA-Z\¡-\￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z\¡-\￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z\¡-\￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z\¡-\￿_0-9])/, /^auto(?![a-zA-Z\¡-\￿_0-9])/, /^(?:int|float|double)(?![a-zA-Z\¡-\￿_0-9])/, /^[a-zA-Z\¡-\￿_][a-zA-Z\¡-\￿_0-9]*/, /^delete(?![a-zA-Z\¡-\￿_0-9])/, /^new(?![a-zA-Z\¡-\￿_0-9])/, /^sizeof(?![a-zA-Z\¡-\￿_0-9])/, /^this(?![a-zA-Z\¡-\￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z\¡-\￿_0-9])/, /^(?:true|false|null)(?![a-zA-Z\¡-\￿_0-9])/, /^operator(?![a-zA-Z\¡-\￿_0-9])/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^noexcept(?![a-zA-Z\¡-\￿_0-9])/, /^(?:\+\+|\-\-)/, [1, "\n", "\t", " "], /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z\¡-\￿_])/, /^\@[a-zA-Z\¡-\￿_]+/, /^[a-zA-Z\¡-\￿_]+/, [0, /^(?!\*\/|\@[a-zA-Z\¡-\￿_]|\{)/, /^[^]/], /^[a-zA-Z\¡-\￿_][a-zA-Z\¡-\￿_0-9]*(?= *\()/];
var nodes = [
  [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
   0, 2],
  [/^[^]/, 0],
  [1, 9, 3],
  [2, 11, 4, {"name":"Statement"}],
  [0, 2,
   0, 1],
  [3, "keyword", e[7], -1,
   3, "keyword", e[15], -1,
   3, "keyword", e[11], -1,
   3, "keyword", e[24], -1,
   3, "keyword", e[8], -1,
   3, "keyword", e[9], -1,
   3, "keyword", e[10], -1,
   3, "keyword", e[13], -1,
   3, "keyword", e[14], -1,
   3, "keyword", e[16], -1,
   3, "keyword", e[17], -1,
   3, "keyword", e[12], -1,
   3, "keyword", e[1], -1,
   3, "keyword", e[38], -1,
   3, "keyword", e[33], -1,
   3, "keyword", e[29], -1,
   3, "keyword", e[30], -1,
   3, "type", e[32], -1,
   3, "type", e[34], -1,
   3, "keyword", e[31], -1,
   3, "atom", e[41], -1,
   1, 158, -1,
   3, "number", e[19], -1,
   2, 163, -1, {"name":"string","token":"string"},
   2, 167, -1, {"name":"prefixOp","token":"operator"},
   3, "operator", e[45], -1,
   3, "operator", e[43], -1,
   2, 168, -1, {"name":"comment","token":"comment"},
   3, "keyword", e[2], -1,
   3, "keyword", e[23], -1,
   3, "keyword", e[37], -1,
   3, "keyword", e[36], -1,
   3, "keyword", e[39], -1,
   3, "keyword", e[4], -1,
   3, "keyword", e[22], -1,
   3, "keyword", e[3], -1,
   3, "keyword", e[44], -1,
   3, "keyword", e[5], -1,
   3, "keyword", e[27], -1,
   3, "keyword", e[28], -1,
   3, "keyword", e[0], -1,
   3, "keyword", e[20], -1,
   3, "keyword", e[21], -1,
   3, "keyword", e[42], -1,
   3, "keyword", e[6], -1,
   3, "keyword", e[18], -1,
   3, "keyword", e[40], -1,
   /^[^]/, -1],
  ["#", 7],
  [/^(?!\/\/|\/\*|\\)./, 7,
   "\\", 8,
   0, -1],
  [/^[^]/, 7],
  [/^[ \t]/, 9,
   "\n", 10,
   2, 168, 9, {"name":"comment","token":"comment"},
   0, -1],
  [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
   0, 9],
  [3, "keyword", e[0], 12,
   3, "keyword", e[1], 12,
   3, "keyword", e[2], 32,
   3, "keyword", e[3], 40,
   3, "keyword", e[4], 44,
   3, "keyword", e[5], 59,
   3, "keyword", e[6], 65,
   2, 174, 77, {"name":"TemplateHead"},
   [7, "constructorAhead"], 79,
   0, 82,
   3, "keyword", e[7], 90,
   3, "keyword", e[8], 94,
   3, "keyword", e[9], 95,
   3, "keyword", e[10], 96,
   3, "keyword", e[11], 120,
   3, "keyword", e[12], 128,
   2, 185, -1, {"name":"Block"},
   3, "keyword", e[13], 132,
   3, "keyword", e[14], 134,
   3, "keyword", e[15], 138,
   3, "keyword", e[1], 142,
   2, 189, 148, {"name":"DeclType"},
   3, "keyword", e[16], 150,
   3, "keyword", e[17], 151,
   [0, /^[a-zA-Z\¡-\￿_]/, /^[a-zA-Z\¡-\￿_0-9]*/, [5, 203]], 150,
   ";", -1,
   1, 204, 156],
  [1, 9, 13],
  [3, "keyword", e[18], 14,
   0, 15],
  [1, 9, 16],
  [1, 9, 17],
  ["(", 18],
  [1, 243, 19],
  [1, 9, 20],
  [1, 9, 21],
  [3, "number", e[19], 22],
  [":", 23,
   0, 24],
  [1, 9, 25],
  [1, 9, 26],
  [1, 9, 27],
  [")", 15],
  [3, "keyword", e[20], 28,
   0, 28],
  [";", -1,
   2, 246, -1, {"name":"ClassBody"}],
  [1, 9, 29],
  [3, "keyword", e[21], 30,
   0, 30],
  [1, 9, 31],
  [1, 252, 24],
  [1, 9, 33],
  [1, 243, 34,
   0, 34],
  [1, 9, 35],
  [3, "operator", "=", 36,
   2, 185, -1, {"name":"Block"}],
  [1, 9, 37],
  [1, 158, 38],
  [1, 9, 39],
  [";", -1],
  [1, 9, 41],
  [1, 204, 42],
  [1, 9, 43],
  [";", -1],
  [1, 9, 45],
  [2, 185, 46, {"name":"Block"}],
  [1, 9, 47],
  [3, "keyword", e[22], 48,
   0, -1],
  [1, 9, 49],
  ["(", 50],
  [1, 9, 51],
  [1, 252, 52],
  [1, 9, 53],
  [1, 264, 54,
   0, 54],
  [1, 9, 55],
  [")", 56],
  [1, 9, 57],
  [2, 185, 58, {"name":"Block"}],
  [1, 9, 47],
  [1, 9, 60],
  ["{", 61],
  [1, 9, 62],
  [2, 163, 63, {"name":"string","token":"string"}],
  [1, 9, 64],
  ["}", -1],
  [1, 9, 66],
  [3, "keyword", e[23], 67,
   3, "keyword", e[2], 68,
   0, 68],
  [1, 9, 69],
  [1, 9, 70],
  [1, 252, 71],
  [1, 158, 71],
  [1, 9, 72],
  ["=", 73,
   0, 74],
  [1, 9, 75],
  [1, 9, 76],
  [1, 252, 74],
  [";", -1],
  [1, 9, 78],
  [2, 11, -1, {"name":"Statement"}],
  [1, 243, 80],
  [1, 9, 81],
  [2, 271, -1, {"name":"FunctionDef"}],
  [3, "meta", e[25], 83],
  [1, 9, 84],
  [0, 82,
   1, 297, 85,
   2, 304, 86, {"name":"qualifiedVariableName","token":"qualified"}],
  [1, 9, 87],
  [1, 9, 88],
  [1, 305, -1],
  [1, 315, 89,
   ";", -1],
  [1, 9, 88],
  [1, 9, 91],
  [1, 243, 92,
   0, 92],
  [1, 9, 93],
  [2, 330, -1, {"name":"BlockOf"},
   0, -1],
  [1, 9, 97],
  [1, 9, 98],
  [1, 9, 99],
  ["(", 100],
  [2, 348, 101, {"name":"CondExpr"}],
  [2, 11, 102, {"name":"Statement"}],
  [1, 9, 103],
  [1, 9, 104],
  [1, 9, 105],
  [2, 11, 106, {"name":"Statement"}],
  [2, 11, -1, {"name":"Statement"}],
  [3, "keyword", e[9], 107],
  [1, 9, 108],
  [1, 9, 109],
  [1, 204, 110,
   0, 110],
  [2, 348, 111, {"name":"CondExpr"}],
  [1, 9, 112],
  [1, 9, 113],
  [";", 114],
  [";", -1],
  [1, 9, 115],
  [1, 204, 116,
   0, 116],
  [1, 9, 117],
  [")", 118],
  [1, 9, 119],
  [2, 11, -1, {"name":"Statement"}],
  [1, 9, 121],
  [2, 348, 122, {"name":"CondExpr"}],
  [1, 9, 123],
  [2, 11, 124, {"name":"Statement"}],
  [1, 9, 125],
  [3, "keyword", e[24], 126,
   0, -1],
  [1, 9, 127],
  [2, 11, -1, {"name":"Statement"}],
  [1, 9, 129],
  [2, 348, 130, {"name":"CondExpr"}],
  [1, 9, 131],
  [2, 185, -1, {"name":"Block"}],
  [1, 9, 133],
  [";", -1],
  [1, 9, 135],
  [e[35], 136],
  [1, 9, 137],
  [";", -1],
  [1, 9, 139],
  [1, 204, 140,
   0, 140],
  [1, 9, 141],
  [";", -1],
  [1, 9, 143],
  [1, 243, 144,
   0, 144],
  [1, 9, 145],
  [2, 353, 146, {"name":"BlockOf"},
   0, 146],
  [1, 9, 147],
  [";", -1],
  [1, 9, 149],
  [1, 305, -1],
  [1, 9, 152],
  [1, 9, 153],
  [":", 154],
  [1, 204, 150],
  [1, 9, 155],
  [2, 11, -1, {"name":"Statement"}],
  [1, 9, 157],
  [";", -1],
  [0, 159,
   3, "variable", e[26], 162,
   2, 375, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [3, "meta", e[25], 160],
  [0, 159,
   3, "variable qualified", e[26], 161,
   2, 304, -1, {"name":"qualifiedVariableName","token":"qualified"}],
  [2, 376, -1, {"name":"TemplateArgs"}],
  [2, 376, -1, {"name":"TemplateArgs"}],
  [/^(?:(?:L|u8?|U|R)(?=[\'\"]))?/, 164],
  [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
   "\"", 165],
  ["\\", 166,
   [0, /^(?!\")/, /^[^]/], 165,
   "\"", -1],
  [/^[^]/, 165],
  [3, "keyword", e[23], -1,
   /^(?:\+\+|\-\-|\!|\~|\&|\*|\+)/, -1],
  [/^\/\*\*(?!\/)/, 169,
   "/*", 173,
   /^\/\/.*/, -1],
  [0, 170,
   2, 381, 169, {"name":"doccomment.braced"},
   0, 171],
  [e[50], 172],
  [2, 389, 171, {"name":"doccomment.tagGroup"},
   "*/", -1],
  [0, 170,
   0, 169],
  [[0, /^(?!\*\/)/, /^[^]/], 173,
   "*/", -1],
  [3, "keyword", e[27], 175,
   0, 175],
  [1, 9, 176],
  [3, "keyword", e[28], 177],
  [1, 9, 178],
  ["<", 179],
  [1, 9, 180],
  [1, 397, 181],
  [1, 9, 182],
  [">", 183],
  [1, 9, 184],
  [1, 9, -1],
  ["{", 186],
  [1, 9, 187],
  [2, 11, 188, {"name":"Statement"},
   "}", -1],
  [1, 9, 187],
  [0, 190,
   0, 191,
   1, 297, -1],
  [3, "keyword", e[29], 192,
   3, "keyword", e[30], 192,
   3, "keyword", e[31], 192],
  [3, "type", e[32], 193],
  [1, 9, 194],
  [1, 9, 195],
  [0, 190,
   3, "keyword", e[33], 196,
   0, 197,
   3, "keyword", e[23], 198,
   0, 199],
  [0, 191,
   3, "type", e[34], 196,
   0, 196],
  [1, 9, 200],
  [3, "type", e[32], 201],
  [1, 9, 199],
  [3, "meta", e[25], 199,
   3, "type", e[35], 196],
  [1, 415, 202,
   0, -1],
  [0, 197,
   3, "type", e[34], 196,
   0, 196],
  [1, 9, 200],
  [e[46], 203,
   /^\:(?!\:)/, -1],
  [3, "keyword", e[36], 205,
   3, "keyword", e[37], 206,
   2, 167, 207, {"name":"prefixOp","token":"operator"},
   3, "keyword", e[38], 207,
   3, "keyword", e[39], 240,
   "[", 220,
   3, "keyword", e[40], 221,
   2, 422, 222, {"name":"ParenExpr"},
   3, "atom", e[41], 240,
   3, "number", e[19], 240,
   2, 163, 240, {"name":"string","token":"string"},
   2, 427, 240, {"name":"BlockOf"},
   1, 158, 240],
  [1, 9, 208],
  [1, 9, 209],
  [1, 9, 204],
  ["[", 210,
   0, 207],
  ["[", 211,
   0, 212],
  [1, 9, 213],
  [1, 9, 214],
  [1, 9, 215],
  ["]", 207],
  ["]", 212],
  ["(", 216,
   0, 207],
  [1, 9, 217],
  [1, 204, 218],
  [1, 9, 219],
  [")", 207],
  [1, 9, 223],
  [1, 9, 224],
  [1, 9, 225],
  [1, 437, 226],
  ["<", 227],
  [1, 204, 240,
   0, 240],
  [1, 9, 228],
  [1, 9, 229],
  ["]", 230],
  [1, 252, 231],
  [1, 9, 232],
  [1, 9, 233],
  [2, 271, 240, {"name":"FunctionDef"}],
  [">", 234],
  [1, 9, 235],
  ["(", 236],
  [1, 9, 237],
  [1, 204, 238],
  [1, 9, 239],
  [")", 240],
  [1, 9, 241],
  [1, 315, 242,
   0, -1],
  [1, 9, 241],
  [3, "keyword", e[42], 244,
   0, 245],
  [3, "operator", e[43], -1,
   2, 167, -1, {"name":"prefixOp","token":"operator"}],
  [3, "meta", e[25], 245,
   3, "def", /^\~?[a-zA-Z\¡-\￿_][a-zA-Z\¡-\￿_0-9]*/, -1],
  ["{", 247],
  [1, 9, 248],
  [3, "keyword", e[21], 249,
   2, 447, 250, {"name":"ObjectMember"},
   "}", -1],
  [1, 9, 251],
  [1, 9, 248],
  [":", 250],
  [3, "keyword", e[23], 253,
   0, 255],
  [1, 9, 254],
  [1, 252, -1],
  [3, "keyword", e[29], 256,
   3, "keyword", e[30], 256,
   3, "keyword", e[31], 256,
   3, "keyword", e[33], 257,
   0, 258,
   3, "keyword", e[23], 259,
   0, 260],
  [1, 9, 255],
  [1, 9, 261],
  [3, "type", e[32], 262],
  [1, 9, 260],
  [3, "meta", e[25], 260,
   3, "type", e[35], 257],
  [1, 415, 263,
   0, -1],
  [0, 258,
   3, "type", e[34], 257,
   0, 257],
  [1, 9, 261],
  [0, 265,
   "(", 267],
  [/^(?:\*|\&\&|\&)/, 266,
   1, 243, -1],
  [1, 9, 265],
  [1, 9, 268],
  [1, 264, 269],
  [1, 9, 270],
  [")", -1],
  [2, 455, 272, {"name":"ParamList"}],
  [1, 9, 273],
  [3, "keyword", e[31], 274,
   /^(?:\&|\&\&)?/, 275],
  [1, 9, 273],
  [1, 9, 276],
  [3, "keyword", e[44], 277,
   3, "keyword", e[3], 278,
   0, 289],
  [1, 9, 279],
  [1, 9, 280],
  ["(", 281,
   0, 289],
  ["(", 282],
  [1, 9, 283],
  [1, 9, 284],
  [1, 204, 285],
  [1, 460, 286],
  [1, 9, 287],
  [1, 9, 288],
  [")", 289],
  [")", 289],
  [1, 9, 290],
  ["->", 291,
   0, 293],
  [1, 9, 292],
  [1, 252, 293],
  [1, 9, 294],
  [2, 466, 295, {"name":"InitializerList"},
   0, 295],
  [1, 9, 296],
  [";", -1,
   2, 185, -1, {"name":"Block"}],
  [3, "keyword", e[33], 301,
   3, "keyword", e[23], 298,
   /^(?!(?:new|delete)(?![a-zA-Z\¡-\￿_0-9]))/, 299],
  [1, 9, 300],
  [3, "type", [0, /^[a-zA-Z\¡-\￿_]/, /^[a-zA-Z\¡-\￿_0-9]*/, [5, 469]], 301],
  [3, "meta", e[25], 300,
   3, "type", e[35], 301],
  [1, 9, 302],
  [1, 415, 303,
   0, -1],
  [1, 9, 302],
  [2, 375, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [1, 264, 306],
  [1, 9, 307],
  [2, 271, -1, {"name":"FunctionDef"},
   1, 473, 308,
   0, 308],
  [1, 9, 309],
  [",", 310,
   ";", -1],
  [1, 9, 311],
  [1, 243, 312],
  [1, 9, 313],
  [1, 473, 314,
   0, 314],
  [1, 9, 309],
  [2, 476, -1, {"name":"ArgList"},
   "[", 316,
   3, "operator", e[45], -1,
   /^(?:\-\>|\.)/, 320,
   3, "operator", e[43], 322,
   "?", 324],
  [1, 9, 317],
  [1, 204, 318],
  [1, 9, 319],
  ["]", -1],
  [1, 9, 321],
  [2, 481, -1, {"name":"fieldName","token":"property"}],
  [1, 9, 323],
  [1, 204, -1],
  [1, 9, 325],
  [1, 204, 326],
  [1, 9, 327],
  [":", 328],
  [1, 9, 329],
  [1, 204, -1],
  ["{", 331],
  [1, 9, 332],
  [1, 243, 333,
   0, 346],
  [1, 9, 334],
  [3, "operator", "=", 335,
   0, 336],
  [1, 9, 337],
  [1, 9, 338],
  [1, 204, 336],
  [",", 339,
   0, 346],
  [1, 9, 340],
  [1, 243, 341],
  [1, 9, 342],
  [3, "operator", "=", 343,
   0, 344],
  [1, 9, 345],
  [1, 9, 338],
  [1, 204, 344],
  [1, 9, 347],
  ["}", -1],
  ["(", 349],
  [1, 9, 350],
  [1, 204, 351,
   0, 351],
  [1, 9, 352],
  [")", -1],
  ["{", 354],
  [1, 9, 355],
  [1, 252, 356,
   0, 373],
  [1, 9, 357],
  [2, 481, 358, {"name":"fieldName","token":"property"},
   0, 358],
  [1, 9, 359],
  [":", 360,
   0, 361],
  [1, 9, 362],
  [1, 9, 363],
  [3, "number", e[19], 361],
  [";", 364,
   0, 373],
  [1, 9, 365],
  [1, 252, 366],
  [1, 9, 367],
  [2, 481, 368, {"name":"fieldName","token":"property"},
   0, 368],
  [1, 9, 369],
  [":", 370,
   0, 371],
  [1, 9, 372],
  [1, 9, 363],
  [3, "number", e[19], 371],
  [1, 9, 374],
  ["}", -1],
  [3, "callee", e[51], -1,
   e[35], -1],
  ["<", 377],
  [1, 9, 378],
  [1, 482, 379],
  [1, 9, 380],
  [">", -1],
  ["{", 382],
  [3, "tag", e[47], 383,
   3, "tag", e[48], 384,
   2, 496, 388, {"name":"doccomment.type","token":"type"}],
  [e[46], 383,
   "{", 385,
   0, 384],
  [[0, /^(?!\}|\*\/)/, /^[^]/], 384,
   0, 388],
  [2, 496, 386, {"name":"doccomment.type","token":"type"}],
  ["}", 387],
  [e[46], 387,
   3, "def", e[49], 384,
   0, 384],
  ["}", -1],
  [3, "tag", e[47], 390,
   3, "tag", e[48], 394],
  [e[46], 390,
   "{", 391,
   0, 394],
  [2, 496, 392, {"name":"doccomment.type","token":"type"}],
  ["}", 393],
  [e[46], 393,
   3, "def", e[49], 394,
   0, 394],
  [0, 395,
   2, 381, 394, {"name":"doccomment.braced"},
   0, -1],
  [e[50], 396],
  [0, 395,
   0, 394],
  [1, 497, 398,
   0, 399,
   0, -1],
  [1, 9, 400],
  [3, "keyword", e[29], 401,
   3, "keyword", e[30], 401,
   1, 252, 402],
  [",", 403,
   0, -1],
  [1, 9, 399],
  [1, 9, 404],
  [1, 9, 405],
  [1, 243, 406],
  [1, 497, 407,
   0, 408],
  [1, 9, 409],
  [1, 9, 400],
  [3, "keyword", e[29], 410,
   3, "keyword", e[30], 410,
   1, 252, 411],
  [1, 473, 398,
   0, 398],
  [1, 9, 408],
  [1, 9, 412],
  [1, 243, 413],
  [1, 9, 414],
  [1, 473, 407,
   0, 407],
  [2, 376, -1, {"name":"TemplateArgs"},
   "::", 416,
   "[", 418,
   /^[\*\&]/, -1,
   3, "keyword", e[31], -1],
  [1, 9, 417],
  [1, 252, -1],
  [1, 9, 419],
  [3, "number", e[19], 420,
   0, 420],
  [1, 9, 421],
  ["]", -1],
  ["(", 423],
  [1, 9, 424],
  [1, 204, 425,
   0, 425],
  [1, 9, 426],
  [")", -1],
  ["{", 428],
  [1, 9, 429],
  [1, 204, 430,
   0, 435],
  [1, 9, 431],
  [",", 432,
   0, 435],
  [1, 9, 433],
  [1, 204, 434],
  [1, 9, 431],
  [1, 9, 436],
  ["}", -1],
  ["&", 438,
   "=", 439,
   3, "keyword", e[39], 439,
   0, -1],
  [1, 9, 440],
  [1, 9, 441],
  [1, 158, 439,
   0, 439],
  [",", 442,
   0, -1],
  [1, 9, 443],
  ["&", 444,
   "=", 445,
   3, "keyword", e[39], 445],
  [1, 9, 446],
  [1, 9, 441],
  [1, 158, 445,
   0, 445],
  [3, "keyword", e[29], 448,
   3, "keyword", e[30], 448,
   3, "keyword", e[31], 448,
   3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z\¡-\￿_]/, /^[a-zA-Z\¡-\￿_0-9]*/], 451,
   1, 252, 449],
  [1, 9, 447],
  [1, 9, 450],
  [1, 264, 451],
  [1, 9, 452],
  [1, 473, 453,
   0, 453,
   2, 271, -1, {"name":"FunctionDef"}],
  [1, 9, 454],
  [";", -1],
  ["(", 456],
  [1, 9, 457],
  [1, 508, 458],
  [1, 9, 459],
  [")", -1],
  [1, 252, 461,
   0, -1],
  [1, 9, 462],
  [",", 463,
   0, -1],
  [1, 9, 464],
  [1, 252, 465],
  [1, 9, 462],
  [":", 467],
  [1, 9, 468],
  [1, 522, -1],
  [/^(?![a-zA-Z\¡-\￿_0-9])/, 470],
  [1, 9, 471],
  [1, 415, 471,
   1, 9, 472],
  [/^[a-zA-Z\¡-\￿_]/, -1],
  [3, "operator", "=", 474,
   2, 427, -1, {"name":"BlockOf"}],
  [1, 9, 475],
  [1, 204, -1],
  ["(", 477],
  [1, 9, 478],
  [1, 528, 479],
  [1, 9, 480],
  [")", -1],
  [3, "callee", e[51], -1,
   e[35], -1],
  [1, 497, 483,
   0, 484,
   3, "number", e[19], 483,
   0, -1],
  [1, 9, 485],
  [3, "keyword", e[29], 486,
   3, "keyword", e[30], 486,
   1, 252, 487],
  [",", 488,
   0, -1],
  [1, 9, 484],
  [1, 9, 489],
  [1, 9, 490],
  [1, 473, 483,
   0, 483],
  [1, 497, 491,
   0, 492,
   3, "number", e[19], 491],
  [1, 9, 485],
  [3, "keyword", e[29], 493,
   3, "keyword", e[30], 493,
   1, 252, 494],
  [1, 9, 492],
  [1, 9, 495],
  [1, 473, 491,
   0, 491],
  [1, 534, -1],
  [3, "keyword", e[28], 498,
   0, 500],
  [1, 9, 499],
  [2, 376, 500, {"name":"TemplateArgs"}],
  [1, 9, 501],
  [3, "keyword", e[0], 502,
   3, "keyword", e[23], 502],
  [1, 9, 503],
  [1, 243, 504],
  [1, 9, 505],
  [3, "operator", "=", 506,
   0, -1],
  [1, 9, 507],
  [1, 158, -1,
   3, "number", e[19], -1],
  [1, 252, 509,
   0, -1],
  [1, 9, 510],
  [1, 264, 511,
   0, 512],
  [1, 9, 513],
  [1, 9, 514],
  [2, 455, 512, {"name":"ParamList"},
   0, 512],
  [",", 515,
   0, -1],
  [1, 9, 516],
  [1, 252, 517],
  [1, 9, 518],
  [1, 264, 519,
   0, 520],
  [1, 9, 521],
  [1, 9, 514],
  [2, 455, 520, {"name":"ParamList"},
   0, 520],
  [1, 538, 523,
   0, -1],
  [1, 9, 524],
  [",", 525,
   0, -1],
  [1, 9, 526],
  [1, 538, 527],
  [1, 9, 524],
  [1, 204, 529,
   0, -1],
  [1, 9, 530],
  [",", 531,
   0, -1],
  [1, 9, 532],
  [1, 204, 533],
  [1, 9, 530],
  [/^(?!\}|\*\/)/, 535,
   0, -1],
  ["{", 536,
   /^[^]/, 534],
  [1, 534, 537],
  [/^\}?/, 534],
  [2, 481, 539, {"name":"fieldName","token":"property"}],
  [1, 9, 540],
  ["(", 541,
   "{", 542],
  [1, 9, 543],
  [1, 9, 544],
  [1, 528, 545],
  [1, 528, 546],
  [1, 9, 547],
  [1, 9, 548],
  [")", -1],
  ["}", -1]
];
var start = 0;
var token = 5;


var cpp = Object.freeze({
	nodes: nodes,
	start: start,
	token: token
});

function getScope(context, scopes) {
  for (var cx = context; cx; cx = cx.parent)
    { if (scopes.indexOf(cx.name) > -1) { return cx } }
}
function isLocal(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
  return false
}

var varRE = /(^|\s)variable($|\s)/;

function markLocals(type, scopes, stream, state, once) {
  if (type == "def") {
    var scope = getScope(state.context, scopes), name = stream.current();
    if (scope) {
      if (!scope.locals) { scope.locals = []; }
      if (once && scope.locals.indexOf(name) > -1)
        { return "variable-2" }
      scope.locals.push(name);
    }
  } else if (varRE.test(type) && !/qualified/.test(type) &&
             isLocal(state.context, stream.current())) {
    type = type.replace(varRE, "$1variable-2$2");
  }
  return type
}

function hasSubStatement(context) {
  var m = /^(if|for|do|while)\b/.exec(context.startLine.slice(context.startPos));
  return m && m[1]
}

function isSwitch(context) {
  return context && context.name == "Statement" &&
    /^switch\b/.test(context.startLine.slice(context.startPos))
}

function isLabel(text) {
  return text && /^\s*(case|default)\b/.test(text)
}

function aligned(cx) {
  return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
}

var bracketed = {
  Block: "}", BlockOf: "}", ClassBody: "}", ObjectLiteral: "}", EnumBody: "}", ArrayInitializer: "}",
  ArrayLiteral: "]",
  ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", TemplateArgs: ")", ForSpec: ")",
  TypeParams: ">", TypeArgs: ">"
};

function statementIndent(cx, config) {
  for (;; cx = cx.parent) {
    if (!cx) { return 0 }
    if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "NewExpr")
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function plus(result, add) {
  return typeof result == "number" ? result + add : result
}

function findIndent(cx, textAfter, curLine, config) {
  if (!cx) { return 0 }
  if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

  var brack = bracketed[cx.name];
  if (brack) {
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (config.align !== false && curLine != cx.startLine && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (cx.name == "Block" || cx.name == "ClassBody" || cx.name == "BlockOf" || cx.name == "EnumBody") {
      // Skip wrapping statement context
      var skipCx = cx;
      if (cx.parent && cx.parent.name == "Statement" && cx.parent.parent &&
          cx.parent.parent.name == "Statement" && hasSubStatement(cx.parent.parent))
        { skipCx = cx.parent.parent; }
      return statementIndent(skipCx, config) + (
        /^(public|private|protected)\s*:/.test(textAfter) ? 1 :
        closed ? 0 :
        isSwitch(cx.parent) && !isLabel(textAfter) ? 2 * config.indentUnit
        : config.indentUnit
      )
    }

    var flat = closed && brack != ")" || curLine == cx.startLine && cx.name != "CondExpr";
    return findIndent(cx.parent, closed ? null : textAfter, cx.startLine, config) +
      (flat ? 0 : config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1))
  } else if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem") {
    var base = statementIndent(cx, config);
    if (!curLine && hasSubStatement(cx))
      { return base + (/^else\b/.test(textAfter) ? 0 : config.indentUnit) }
    var flat$1 = curLine == cx.startLine ||
        curLine && CodeMirror.countColumn(curLine, null, config.tabSize) <= base;
    return base + (flat$1 ? 0 : 2 * config.indentUnit)
  } else if (cx.name == "ArrowRest") {
    return plus(findIndent(cx.parent, textAfter, cx.startLine, config), config.indentUnit)
  } else {
    return plus(findIndent(cx.parent, textAfter, curLine, config),
                cx.name == "InitializerList" ? 2 : cx.name == "ThrowsClause" ? 2 * config.indentUnit : 0)
  }
}

function indent(state, textAfter, line, config) {
  if (textAfter.charAt(0) == "#") { return 0 }
  var top = state.context && state.context.name;
  if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "TemplateHead")
    { return statementIndent(state.context, config) }
  if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^\s*(@|\*\/)/.test(textAfter))
    { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

  return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, null, config)
}

function constructorAhead(line, pos) {
  var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
  return match && match[1] == match[2]
}

function localConstructorAhead(line, pos, cx) {
  var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos));
  if (!ahead) { return false }
  while (cx.name != "Statement") { cx = cx.parent; }
  var className = /\bclass\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
  return className ? className[1] == ahead[1] : false
}

var scopes = ["Block", "FunctionDef"];

var CppMode = (function (superclass) {
  function CppMode(conf) {
    superclass.call(this, cpp, {
      predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead}
    });
    this.conf = conf;
  }

  if ( superclass ) CppMode.__proto__ = superclass;
  CppMode.prototype = Object.create( superclass && superclass.prototype );
  CppMode.prototype.constructor = CppMode;

  CppMode.prototype.token = function token$$1 (stream, state) {
    return markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state)
  };

  CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
    return indent(state, textAfter, line, this.conf)
  };

  return CppMode;
}(CodeMirror.GrammarMode));

CppMode.prototype.electricInput = /^\s*(?:case .*?:|default:|\{\}?|\})$/;
CppMode.prototype.blockCommentStart = "/*";
CppMode.prototype.blockCommentEnd = "*/";
CppMode.prototype.blockCommentContinue = " * ";
CppMode.prototype.lineComment = "//";
CppMode.prototype.fold = "brace";

CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
