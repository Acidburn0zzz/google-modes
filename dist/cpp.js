(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
	typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
	(factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

var e = [/^class(?![a-zA-Z\¡-\￿_0-9])/, /^(?:struct|union)(?![a-zA-Z\¡-\￿_0-9])/, /^namespace(?![a-zA-Z\¡-\￿_0-9])/, /^throw(?![a-zA-Z\¡-\￿_0-9])/, /^try(?![a-zA-Z\¡-\￿_0-9])/, /^asm(?![a-zA-Z\¡-\￿_0-9])/, /^using(?![a-zA-Z\¡-\￿_0-9])/, /^enum(?![a-zA-Z\¡-\￿_0-9])/, /^for(?![a-zA-Z\¡-\￿_0-9])/, /^while(?![a-zA-Z\¡-\￿_0-9])/, /^do(?![a-zA-Z\¡-\￿_0-9])/, /^if(?![a-zA-Z\¡-\￿_0-9])/, /^switch(?![a-zA-Z\¡-\￿_0-9])/, /^(?:break|continue)(?![a-zA-Z\¡-\￿_0-9])/, /^goto(?![a-zA-Z\¡-\￿_0-9])/, /^return(?![a-zA-Z\¡-\￿_0-9])/, /^default(?![a-zA-Z\¡-\￿_0-9])/, /^case(?![a-zA-Z\¡-\￿_0-9])/, /^alignas(?![a-zA-Z\¡-\￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)[LlUuFf]?/, /^virtual(?![a-zA-Z\¡-\￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z\¡-\￿_0-9])/, /^catch(?![a-zA-Z\¡-\￿_0-9])/, /^typename(?![a-zA-Z\¡-\￿_0-9])/, /^else(?![a-zA-Z\¡-\￿_0-9])/, /^(?:\:\:|[a-zA-Z\¡-\￿_][a-zA-Z\¡-\￿_0-9]* *\:\:)/, /^[a-zA-Z\¡-\￿_][a-zA-Z\¡-\￿_0-9]*(?=\<)/, /^export(?![a-zA-Z\¡-\￿_0-9])/, /^template(?![a-zA-Z\¡-\￿_0-9])/, /^(?:inline|virtual|explicit|friend|constexpr)(?![a-zA-Z\¡-\￿_0-9])/, /^(?:register|static|extern|typedef)(?![a-zA-Z\¡-\￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z\¡-\￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z\¡-\￿_0-9])/, /^auto(?![a-zA-Z\¡-\￿_0-9])/, /^(?:int|float|double)(?![a-zA-Z\¡-\￿_0-9])/, /^[a-zA-Z\¡-\￿_][a-zA-Z\¡-\￿_0-9]*/, /^delete(?![a-zA-Z\¡-\￿_0-9])/, /^new(?![a-zA-Z\¡-\￿_0-9])/, /^sizeof(?![a-zA-Z\¡-\￿_0-9])/, /^this(?![a-zA-Z\¡-\￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z\¡-\￿_0-9])/, /^(?:true|false|null)(?![a-zA-Z\¡-\￿_0-9])/, /^operator(?![a-zA-Z\¡-\￿_0-9])/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^noexcept(?![a-zA-Z\¡-\￿_0-9])/, /^(?:\+\+|\-\-)/, [1, "\n", "\t", " "], /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z\¡-\￿_])/, /^\@[a-zA-Z\¡-\￿_]+/, /^[a-zA-Z\¡-\￿_]+/, [0, /^(?!\*\/|\@[a-zA-Z\¡-\￿_]|\{)/, /^[^]/], /^[a-zA-Z\¡-\￿_][a-zA-Z\¡-\￿_0-9]*(?= *\()/];
var nodes = [
  [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
   0, 2],
  [/^[^]/, 0],
  [1, 9, 3],
  [2, 11, 4, {"name":"Statement"}],
  [0, 2,
   0, 1],
  [3, "keyword", e[7], -1,
   3, "keyword", e[15], -1,
   3, "keyword", e[11], -1,
   3, "keyword", e[24], -1,
   3, "keyword", e[8], -1,
   3, "keyword", e[9], -1,
   3, "keyword", e[10], -1,
   3, "keyword", e[13], -1,
   3, "keyword", e[14], -1,
   3, "keyword", e[16], -1,
   3, "keyword", e[17], -1,
   3, "keyword", e[12], -1,
   3, "keyword", e[1], -1,
   3, "keyword", e[38], -1,
   3, "keyword", e[33], -1,
   3, "keyword", e[29], -1,
   3, "keyword", e[30], -1,
   3, "type", e[32], -1,
   3, "type", e[34], -1,
   3, "keyword", e[31], -1,
   3, "atom", e[41], -1,
   1, 158, -1,
   3, "number", e[19], -1,
   2, 163, -1, {"name":"string","token":"string"},
   2, 167, -1, {"name":"prefixOp","token":"operator"},
   3, "operator", e[45], -1,
   3, "operator", e[43], -1,
   2, 168, -1, {"name":"comment","token":"comment"},
   3, "keyword", e[2], -1,
   3, "keyword", e[23], -1,
   3, "keyword", e[37], -1,
   3, "keyword", e[36], -1,
   3, "keyword", e[39], -1,
   3, "keyword", e[4], -1,
   3, "keyword", e[22], -1,
   3, "keyword", e[3], -1,
   3, "keyword", e[44], -1,
   3, "keyword", e[5], -1,
   3, "keyword", e[27], -1,
   3, "keyword", e[28], -1,
   3, "keyword", e[0], -1,
   3, "keyword", e[20], -1,
   3, "keyword", e[21], -1,
   3, "keyword", e[42], -1,
   3, "keyword", e[6], -1,
   3, "keyword", e[18], -1,
   3, "keyword", e[40], -1,
   /^[^]/, -1],
  ["#", 7],
  [/^(?!\/\/|\/\*|\\)./, 7,
   "\\", 8,
   0, -1],
  [/^[^]/, 7],
  [/^[ \t]/, 9,
   "\n", 10,
   2, 168, 9, {"name":"comment","token":"comment"},
   0, -1],
  [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
   0, 9],
  [3, "keyword", e[0], 12,
   3, "keyword", e[1], 12,
   3, "keyword", e[2], 32,
   3, "keyword", e[3], 40,
   3, "keyword", e[4], 44,
   3, "keyword", e[5], 59,
   3, "keyword", e[6], 65,
   2, 174, 77, {"name":"TemplateHead"},
   [7, "constructorAhead"], 79,
   0, 82,
   3, "keyword", e[7], 90,
   3, "keyword", e[8], 94,
   3, "keyword", e[9], 95,
   3, "keyword", e[10], 96,
   3, "keyword", e[11], 120,
   3, "keyword", e[12], 128,
   2, 185, -1, {"name":"Block"},
   3, "keyword", e[13], 132,
   3, "keyword", e[14], 134,
   3, "keyword", e[15], 138,
   3, "keyword", e[1], 142,
   2, 189, 148, {"name":"DeclType"},
   3, "keyword", e[16], 150,
   3, "keyword", e[17], 151,
   [0, /^[a-zA-Z\¡-\￿_]/, /^[a-zA-Z\¡-\￿_0-9]*/, [5, 202]], 150,
   ";", -1,
   1, 203, 156],
  [1, 9, 13],
  [3, "keyword", e[18], 14,
   0, 15],
  [1, 9, 16],
  [1, 9, 17],
  ["(", 18],
  [1, 242, 19],
  [1, 9, 20],
  [1, 9, 21],
  [3, "number", e[19], 22],
  [":", 23,
   0, 24],
  [1, 9, 25],
  [1, 9, 26],
  [1, 9, 27],
  [")", 15],
  [3, "keyword", e[20], 28,
   0, 28],
  [";", -1,
   2, 245, -1, {"name":"ClassBody"}],
  [1, 9, 29],
  [3, "keyword", e[21], 30,
   0, 30],
  [1, 9, 31],
  [1, 251, 24],
  [1, 9, 33],
  [1, 242, 34,
   0, 34],
  [1, 9, 35],
  [3, "operator", "=", 36,
   2, 185, -1, {"name":"Block"}],
  [1, 9, 37],
  [1, 158, 38],
  [1, 9, 39],
  [";", -1],
  [1, 9, 41],
  [1, 203, 42],
  [1, 9, 43],
  [";", -1],
  [1, 9, 45],
  [2, 185, 46, {"name":"Block"}],
  [1, 9, 47],
  [3, "keyword", e[22], 48,
   0, -1],
  [1, 9, 49],
  ["(", 50],
  [1, 9, 51],
  [1, 251, 52],
  [1, 9, 53],
  [1, 262, 54,
   0, 54],
  [1, 9, 55],
  [")", 56],
  [1, 9, 57],
  [2, 185, 58, {"name":"Block"}],
  [1, 9, 47],
  [1, 9, 60],
  ["{", 61],
  [1, 9, 62],
  [2, 163, 63, {"name":"string","token":"string"}],
  [1, 9, 64],
  ["}", -1],
  [1, 9, 66],
  [3, "keyword", e[23], 67,
   3, "keyword", e[2], 68,
   0, 68],
  [1, 9, 69],
  [1, 9, 70],
  [1, 251, 71],
  [1, 158, 71],
  [1, 9, 72],
  ["=", 73,
   0, 74],
  [1, 9, 75],
  [1, 9, 76],
  [1, 251, 74],
  [";", -1],
  [1, 9, 78],
  [2, 11, -1, {"name":"Statement"}],
  [1, 242, 80],
  [1, 9, 81],
  [2, 269, -1, {"name":"FunctionDef"}],
  [3, "meta", e[25], 83],
  [1, 9, 84],
  [0, 82,
   1, 295, 85,
   2, 302, 86, {"name":"qualifiedVariableName","token":"qualified"}],
  [1, 9, 87],
  [1, 9, 88],
  [1, 303, -1],
  [1, 313, 89,
   ";", -1],
  [1, 9, 88],
  [1, 9, 91],
  [1, 242, 92,
   0, 92],
  [1, 9, 93],
  [2, 328, -1, {"name":"BlockOf"},
   0, -1],
  [1, 9, 97],
  [1, 9, 98],
  [1, 9, 99],
  ["(", 100],
  [2, 346, 101, {"name":"CondExpr"}],
  [2, 11, 102, {"name":"Statement"}],
  [1, 9, 103],
  [1, 9, 104],
  [1, 9, 105],
  [2, 11, 106, {"name":"Statement"}],
  [2, 11, -1, {"name":"Statement"}],
  [3, "keyword", e[9], 107],
  [1, 9, 108],
  [1, 9, 109],
  [1, 203, 110,
   0, 110],
  [2, 346, 111, {"name":"CondExpr"}],
  [1, 9, 112],
  [1, 9, 113],
  [";", 114],
  [";", -1],
  [1, 9, 115],
  [1, 203, 116,
   0, 116],
  [1, 9, 117],
  [")", 118],
  [1, 9, 119],
  [2, 11, -1, {"name":"Statement"}],
  [1, 9, 121],
  [2, 346, 122, {"name":"CondExpr"}],
  [1, 9, 123],
  [2, 11, 124, {"name":"Statement"}],
  [1, 9, 125],
  [3, "keyword", e[24], 126,
   0, -1],
  [1, 9, 127],
  [2, 11, -1, {"name":"Statement"}],
  [1, 9, 129],
  [2, 346, 130, {"name":"CondExpr"}],
  [1, 9, 131],
  [2, 185, -1, {"name":"Block"}],
  [1, 9, 133],
  [";", -1],
  [1, 9, 135],
  [e[35], 136],
  [1, 9, 137],
  [";", -1],
  [1, 9, 139],
  [1, 203, 140,
   0, 140],
  [1, 9, 141],
  [";", -1],
  [1, 9, 143],
  [1, 242, 144,
   0, 144],
  [1, 9, 145],
  [2, 351, 146, {"name":"BlockOf"},
   0, 146],
  [1, 9, 147],
  [";", -1],
  [1, 9, 149],
  [1, 303, -1],
  [1, 9, 152],
  [1, 9, 153],
  [":", 154],
  [1, 203, 150],
  [1, 9, 155],
  [2, 11, -1, {"name":"Statement"}],
  [1, 9, 157],
  [";", -1],
  [0, 159,
   3, "variable", e[26], 162,
   2, 373, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [3, "meta", e[25], 160],
  [0, 159,
   3, "variable qualified", e[26], 161,
   2, 302, -1, {"name":"qualifiedVariableName","token":"qualified"}],
  [2, 374, -1, {"name":"TemplateArgs"}],
  [2, 374, -1, {"name":"TemplateArgs"}],
  [/^(?:(?:L|u8?|U|R)(?=[\'\"]))?/, 164],
  [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
   "\"", 165],
  ["\\", 166,
   [0, /^(?!\")/, /^[^]/], 165,
   "\"", -1],
  [/^[^]/, 165],
  [3, "keyword", e[23], -1,
   /^(?:\+\+|\-\-|\!|\~|\&|\*|\+)/, -1],
  [/^\/\*\*(?!\/)/, 169,
   "/*", 173,
   /^\/\/.*/, -1],
  [0, 170,
   2, 379, 169, {"name":"doccomment.braced"},
   0, 171],
  [e[50], 172],
  [2, 387, 171, {"name":"doccomment.tagGroup"},
   "*/", -1],
  [0, 170,
   0, 169],
  [[0, /^(?!\*\/)/, /^[^]/], 173,
   "*/", -1],
  [3, "keyword", e[27], 175,
   0, 175],
  [1, 9, 176],
  [3, "keyword", e[28], 177],
  [1, 9, 178],
  ["<", 179],
  [1, 9, 180],
  [1, 395, 181],
  [1, 9, 182],
  [">", 183],
  [1, 9, 184],
  [1, 9, -1],
  ["{", 186],
  [1, 9, 187],
  [2, 11, 188, {"name":"Statement"},
   "}", -1],
  [1, 9, 187],
  [0, 190,
   0, 191,
   1, 295, -1],
  [3, "keyword", e[29], 192,
   3, "keyword", e[30], 192,
   3, "keyword", e[31], 192],
  [3, "type", e[32], 193],
  [1, 9, 194],
  [1, 9, 195],
  [0, 190,
   3, "keyword", e[33], 196,
   0, 197,
   0, 198],
  [0, 191,
   3, "type", e[34], 196,
   0, 196],
  [1, 9, 199],
  [3, "type", e[32], 200],
  [3, "meta", e[25], 198,
   3, "type", e[35], 196],
  [1, 413, 201,
   0, -1],
  [0, 197,
   3, "type", e[34], 196,
   0, 196],
  [1, 9, 199],
  [e[46], 202,
   /^\:(?!\:)/, -1],
  [3, "keyword", e[36], 204,
   3, "keyword", e[37], 205,
   2, 167, 206, {"name":"prefixOp","token":"operator"},
   3, "keyword", e[38], 206,
   3, "keyword", e[39], 239,
   "[", 219,
   3, "keyword", e[40], 220,
   2, 420, 221, {"name":"ParenExpr"},
   3, "atom", e[41], 239,
   3, "number", e[19], 239,
   2, 163, 239, {"name":"string","token":"string"},
   2, 425, 239, {"name":"BlockOf"},
   1, 158, 239],
  [1, 9, 207],
  [1, 9, 208],
  [1, 9, 203],
  ["[", 209,
   0, 206],
  ["[", 210,
   0, 211],
  [1, 9, 212],
  [1, 9, 213],
  [1, 9, 214],
  ["]", 206],
  ["]", 211],
  ["(", 215,
   0, 206],
  [1, 9, 216],
  [1, 203, 217],
  [1, 9, 218],
  [")", 206],
  [1, 9, 222],
  [1, 9, 223],
  [1, 9, 224],
  [1, 435, 225],
  ["<", 226],
  [1, 203, 239,
   0, 239],
  [1, 9, 227],
  [1, 9, 228],
  ["]", 229],
  [1, 251, 230],
  [1, 9, 231],
  [1, 9, 232],
  [2, 269, 239, {"name":"FunctionDef"}],
  [">", 233],
  [1, 9, 234],
  ["(", 235],
  [1, 9, 236],
  [1, 203, 237],
  [1, 9, 238],
  [")", 239],
  [1, 9, 240],
  [1, 313, 241,
   0, -1],
  [1, 9, 240],
  [3, "keyword", e[42], 243,
   0, 244],
  [3, "operator", e[43], -1,
   2, 167, -1, {"name":"prefixOp","token":"operator"}],
  [3, "meta", e[25], 244,
   3, "def", /^\~?[a-zA-Z\¡-\￿_][a-zA-Z\¡-\￿_0-9]*/, -1],
  ["{", 246],
  [1, 9, 247],
  [3, "keyword", e[21], 248,
   2, 445, 249, {"name":"ObjectMember"},
   "}", -1],
  [1, 9, 250],
  [1, 9, 247],
  [":", 249],
  [3, "keyword", e[23], 252,
   0, 254],
  [1, 9, 253],
  [1, 251, -1],
  [3, "keyword", e[29], 255,
   3, "keyword", e[30], 255,
   3, "keyword", e[31], 255,
   3, "keyword", e[33], 256,
   0, 257,
   0, 258],
  [1, 9, 254],
  [1, 9, 259],
  [3, "type", e[32], 260],
  [3, "meta", e[25], 258,
   3, "type", e[35], 256],
  [1, 413, 261,
   0, -1],
  [0, 257,
   3, "type", e[34], 256,
   0, 256],
  [1, 9, 259],
  [0, 263,
   "(", 265],
  [/^(?:\*|\&\&|\&)/, 264,
   1, 242, -1],
  [1, 9, 263],
  [1, 9, 266],
  [1, 262, 267],
  [1, 9, 268],
  [")", -1],
  [2, 453, 270, {"name":"ParamList"}],
  [1, 9, 271],
  [3, "keyword", e[31], 272,
   /^(?:\&|\&\&)?/, 273],
  [1, 9, 271],
  [1, 9, 274],
  [3, "keyword", e[44], 275,
   3, "keyword", e[3], 276,
   0, 287],
  [1, 9, 277],
  [1, 9, 278],
  ["(", 279,
   0, 287],
  ["(", 280],
  [1, 9, 281],
  [1, 9, 282],
  [1, 203, 283],
  [1, 458, 284],
  [1, 9, 285],
  [1, 9, 286],
  [")", 287],
  [")", 287],
  [1, 9, 288],
  ["->", 289,
   0, 291],
  [1, 9, 290],
  [1, 251, 291],
  [1, 9, 292],
  [2, 464, 293, {"name":"InitializerList"},
   0, 293],
  [1, 9, 294],
  [";", -1,
   2, 185, -1, {"name":"Block"}],
  [3, "keyword", e[33], 299,
   3, "keyword", e[23], 296,
   /^(?!(?:new|delete)(?![a-zA-Z\¡-\￿_0-9]))/, 297],
  [1, 9, 298],
  [3, "type", [0, /^[a-zA-Z\¡-\￿_]/, /^[a-zA-Z\¡-\￿_0-9]*/, [5, 467]], 299],
  [3, "meta", e[25], 298,
   3, "type", e[35], 299],
  [1, 9, 300],
  [1, 413, 301,
   0, -1],
  [1, 9, 300],
  [2, 373, -1, {"name":"unqualifiedVariableName","token":"variable"}],
  [1, 262, 304],
  [1, 9, 305],
  [2, 269, -1, {"name":"FunctionDef"},
   1, 471, 306,
   0, 306],
  [1, 9, 307],
  [",", 308,
   ";", -1],
  [1, 9, 309],
  [1, 242, 310],
  [1, 9, 311],
  [1, 471, 312,
   0, 312],
  [1, 9, 307],
  [2, 474, -1, {"name":"ArgList"},
   "[", 314,
   3, "operator", e[45], -1,
   /^(?:\-\>|\.)/, 318,
   3, "operator", e[43], 320,
   "?", 322],
  [1, 9, 315],
  [1, 203, 316],
  [1, 9, 317],
  ["]", -1],
  [1, 9, 319],
  [2, 479, -1, {"name":"fieldName","token":"property"}],
  [1, 9, 321],
  [1, 203, -1],
  [1, 9, 323],
  [1, 203, 324],
  [1, 9, 325],
  [":", 326],
  [1, 9, 327],
  [1, 203, -1],
  ["{", 329],
  [1, 9, 330],
  [1, 242, 331,
   0, 344],
  [1, 9, 332],
  [3, "operator", "=", 333,
   0, 334],
  [1, 9, 335],
  [1, 9, 336],
  [1, 203, 334],
  [",", 337,
   0, 344],
  [1, 9, 338],
  [1, 242, 339],
  [1, 9, 340],
  [3, "operator", "=", 341,
   0, 342],
  [1, 9, 343],
  [1, 9, 336],
  [1, 203, 342],
  [1, 9, 345],
  ["}", -1],
  ["(", 347],
  [1, 9, 348],
  [1, 203, 349,
   0, 349],
  [1, 9, 350],
  [")", -1],
  ["{", 352],
  [1, 9, 353],
  [1, 251, 354,
   0, 371],
  [1, 9, 355],
  [2, 479, 356, {"name":"fieldName","token":"property"},
   0, 356],
  [1, 9, 357],
  [":", 358,
   0, 359],
  [1, 9, 360],
  [1, 9, 361],
  [3, "number", e[19], 359],
  [";", 362,
   0, 371],
  [1, 9, 363],
  [1, 251, 364],
  [1, 9, 365],
  [2, 479, 366, {"name":"fieldName","token":"property"},
   0, 366],
  [1, 9, 367],
  [":", 368,
   0, 369],
  [1, 9, 370],
  [1, 9, 361],
  [3, "number", e[19], 369],
  [1, 9, 372],
  ["}", -1],
  [3, "callee", e[51], -1,
   e[35], -1],
  ["<", 375],
  [1, 9, 376],
  [1, 480, 377],
  [1, 9, 378],
  [">", -1],
  ["{", 380],
  [3, "tag", e[47], 381,
   3, "tag", e[48], 382,
   2, 494, 386, {"name":"doccomment.type","token":"type"}],
  [e[46], 381,
   "{", 383,
   0, 382],
  [[0, /^(?!\}|\*\/)/, /^[^]/], 382,
   0, 386],
  [2, 494, 384, {"name":"doccomment.type","token":"type"}],
  ["}", 385],
  [e[46], 385,
   3, "def", e[49], 382,
   0, 382],
  ["}", -1],
  [3, "tag", e[47], 388,
   3, "tag", e[48], 392],
  [e[46], 388,
   "{", 389,
   0, 392],
  [2, 494, 390, {"name":"doccomment.type","token":"type"}],
  ["}", 391],
  [e[46], 391,
   3, "def", e[49], 392,
   0, 392],
  [0, 393,
   2, 379, 392, {"name":"doccomment.braced"},
   0, -1],
  [e[50], 394],
  [0, 393,
   0, 392],
  [1, 495, 396,
   0, 397,
   0, -1],
  [1, 9, 398],
  [3, "keyword", e[29], 399,
   3, "keyword", e[30], 399,
   1, 251, 400],
  [",", 401,
   0, -1],
  [1, 9, 397],
  [1, 9, 402],
  [1, 9, 403],
  [1, 242, 404],
  [1, 495, 405,
   0, 406],
  [1, 9, 407],
  [1, 9, 398],
  [3, "keyword", e[29], 408,
   3, "keyword", e[30], 408,
   1, 251, 409],
  [1, 471, 396,
   0, 396],
  [1, 9, 406],
  [1, 9, 410],
  [1, 242, 411],
  [1, 9, 412],
  [1, 471, 405,
   0, 405],
  [2, 374, -1, {"name":"TemplateArgs"},
   "::", 414,
   "[", 416,
   /^[\*\&]/, -1,
   3, "keyword", e[31], -1],
  [1, 9, 415],
  [1, 251, -1],
  [1, 9, 417],
  [3, "number", e[19], 418,
   0, 418],
  [1, 9, 419],
  ["]", -1],
  ["(", 421],
  [1, 9, 422],
  [1, 203, 423,
   0, 423],
  [1, 9, 424],
  [")", -1],
  ["{", 426],
  [1, 9, 427],
  [1, 203, 428,
   0, 433],
  [1, 9, 429],
  [",", 430,
   0, 433],
  [1, 9, 431],
  [1, 203, 432],
  [1, 9, 429],
  [1, 9, 434],
  ["}", -1],
  ["&", 436,
   "=", 437,
   3, "keyword", e[39], 437,
   0, -1],
  [1, 9, 438],
  [1, 9, 439],
  [1, 158, 437,
   0, 437],
  [",", 440,
   0, -1],
  [1, 9, 441],
  ["&", 442,
   "=", 443,
   3, "keyword", e[39], 443],
  [1, 9, 444],
  [1, 9, 439],
  [1, 158, 443,
   0, 443],
  [3, "keyword", e[29], 446,
   3, "keyword", e[30], 446,
   3, "keyword", e[31], 446,
   3, "def", [0, [7, "localConstructorAhead"], /^\~?/, /^[a-zA-Z\¡-\￿_]/, /^[a-zA-Z\¡-\￿_0-9]*/], 449,
   1, 251, 447],
  [1, 9, 445],
  [1, 9, 448],
  [1, 262, 449],
  [1, 9, 450],
  [1, 471, 451,
   0, 451,
   2, 269, -1, {"name":"FunctionDef"}],
  [1, 9, 452],
  [";", -1],
  ["(", 454],
  [1, 9, 455],
  [1, 506, 456],
  [1, 9, 457],
  [")", -1],
  [1, 251, 459,
   0, -1],
  [1, 9, 460],
  [",", 461,
   0, -1],
  [1, 9, 462],
  [1, 251, 463],
  [1, 9, 460],
  [":", 465],
  [1, 9, 466],
  [1, 520, -1],
  [/^(?![a-zA-Z\¡-\￿_0-9])/, 468],
  [1, 9, 469],
  [1, 413, 469,
   1, 9, 470],
  [/^[a-zA-Z\¡-\￿_]/, -1],
  [3, "operator", "=", 472,
   2, 425, -1, {"name":"BlockOf"}],
  [1, 9, 473],
  [1, 203, -1],
  ["(", 475],
  [1, 9, 476],
  [1, 526, 477],
  [1, 9, 478],
  [")", -1],
  [3, "callee", e[51], -1,
   e[35], -1],
  [1, 495, 481,
   0, 482,
   3, "number", e[19], 481,
   0, -1],
  [1, 9, 483],
  [3, "keyword", e[29], 484,
   3, "keyword", e[30], 484,
   1, 251, 485],
  [",", 486,
   0, -1],
  [1, 9, 482],
  [1, 9, 487],
  [1, 9, 488],
  [1, 471, 481,
   0, 481],
  [1, 495, 489,
   0, 490,
   3, "number", e[19], 489],
  [1, 9, 483],
  [3, "keyword", e[29], 491,
   3, "keyword", e[30], 491,
   1, 251, 492],
  [1, 9, 490],
  [1, 9, 493],
  [1, 471, 489,
   0, 489],
  [1, 532, -1],
  [3, "keyword", e[28], 496,
   0, 498],
  [1, 9, 497],
  [2, 374, 498, {"name":"TemplateArgs"}],
  [1, 9, 499],
  [3, "keyword", e[0], 500,
   3, "keyword", e[23], 500],
  [1, 9, 501],
  [1, 242, 502],
  [1, 9, 503],
  [3, "operator", "=", 504,
   0, -1],
  [1, 9, 505],
  [1, 158, -1,
   3, "number", e[19], -1],
  [1, 251, 507,
   0, -1],
  [1, 9, 508],
  [1, 262, 509,
   0, 510],
  [1, 9, 511],
  [1, 9, 512],
  [2, 453, 510, {"name":"ParamList"},
   0, 510],
  [",", 513,
   0, -1],
  [1, 9, 514],
  [1, 251, 515],
  [1, 9, 516],
  [1, 262, 517,
   0, 518],
  [1, 9, 519],
  [1, 9, 512],
  [2, 453, 518, {"name":"ParamList"},
   0, 518],
  [1, 536, 521,
   0, -1],
  [1, 9, 522],
  [",", 523,
   0, -1],
  [1, 9, 524],
  [1, 536, 525],
  [1, 9, 522],
  [1, 203, 527,
   0, -1],
  [1, 9, 528],
  [",", 529,
   0, -1],
  [1, 9, 530],
  [1, 203, 531],
  [1, 9, 528],
  [/^(?!\}|\*\/)/, 533,
   0, -1],
  ["{", 534,
   /^[^]/, 532],
  [1, 532, 535],
  [/^\}?/, 532],
  [2, 479, 537, {"name":"fieldName","token":"property"}],
  [1, 9, 538],
  ["(", 539,
   "{", 540],
  [1, 9, 541],
  [1, 9, 542],
  [1, 526, 543],
  [1, 526, 544],
  [1, 9, 545],
  [1, 9, 546],
  [")", -1],
  ["}", -1]
];
var start = 0;
var token = 5;


var cpp = Object.freeze({
	nodes: nodes,
	start: start,
	token: token
});

function getScope(context, scopes) {
  for (var cx = context; cx; cx = cx.parent)
    { if (scopes.indexOf(cx.name) > -1) { return cx } }
}
function isLocal(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
  return false
}

var varRE = /(^|\s)variable($|\s)/;

function markLocals(type, scopes, stream, state, once) {
  if (type == "def") {
    var scope = getScope(state.context, scopes), name = stream.current();
    if (scope) {
      if (!scope.locals) { scope.locals = []; }
      if (once && scope.locals.indexOf(name) > -1)
        { return "variable-2" }
      scope.locals.push(name);
    }
  } else if (varRE.test(type) && !/qualified/.test(type) &&
             isLocal(state.context, stream.current())) {
    type = type.replace(varRE, "$1variable-2$2");
  }
  return type
}

function hasSubStatement(context) {
  var m = /^(if|for|do|while)\b/.exec(context.startLine.slice(context.startPos));
  return m && m[1]
}

function isSwitch(context) {
  return context && context.name == "Statement" &&
    /^switch\b/.test(context.startLine.slice(context.startPos))
}

function isLabel(text) {
  return text && /^\s*(case|default)\b/.test(text)
}

function aligned(cx) {
  return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
}

var bracketed = {
  Block: "}", BlockOf: "}", ClassBody: "}", ObjectLiteral: "}", EnumBody: "}", ArrayInitializer: "}",
  ArrayLiteral: "]",
  ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", TemplateArgs: ")", ForSpec: ")",
  TypeParams: ">", TypeArgs: ">"
};

function statementIndent(cx, config) {
  for (;; cx = cx.parent) {
    if (!cx) { return 0 }
    if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "NewExpr")
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function plus(result, add) {
  return typeof result == "number" ? result + add : result
}

function findIndent(cx, textAfter, curLine, config) {
  if (!cx) { return 0 }
  if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

  var brack = bracketed[cx.name];
  if (brack) {
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (config.align !== false && curLine != cx.startLine && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (cx.name == "Block" || cx.name == "ClassBody" || cx.name == "BlockOf" || cx.name == "EnumBody") {
      // Skip wrapping statement context
      var skipCx = cx;
      if (cx.parent && cx.parent.name == "Statement" && cx.parent.parent &&
          cx.parent.parent.name == "Statement" && hasSubStatement(cx.parent.parent))
        { skipCx = cx.parent.parent; }
      return statementIndent(skipCx, config) + (
        /^(public|private|protected)\s*:/.test(textAfter) ? 1 :
        closed ? 0 :
        isSwitch(cx.parent) && !isLabel(textAfter) ? 2 * config.indentUnit
        : config.indentUnit
      )
    }

    var flat = closed && brack != ")" || curLine == cx.startLine && cx.name != "CondExpr";
    return findIndent(cx.parent, closed ? null : textAfter, cx.startLine, config) +
      (flat ? 0 : config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1))
  } else if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem") {
    var base = statementIndent(cx, config);
    if (!curLine && hasSubStatement(cx))
      { return base + (/^else\b/.test(textAfter) ? 0 : config.indentUnit) }
    var flat$1 = curLine == cx.startLine ||
        curLine && CodeMirror.countColumn(curLine, null, config.tabSize) <= base;
    return base + (flat$1 ? 0 : 2 * config.indentUnit)
  } else if (cx.name == "ArrowRest") {
    return plus(findIndent(cx.parent, textAfter, cx.startLine, config), config.indentUnit)
  } else {
    return plus(findIndent(cx.parent, textAfter, curLine, config),
                cx.name == "InitializerList" ? 2 : cx.name == "ThrowsClause" ? 2 * config.indentUnit : 0)
  }
}

function indent(state, textAfter, line, config) {
  if (textAfter.charAt(0) == "#") { return 0 }
  var top = state.context && state.context.name;
  if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead" || top == "TemplateHead")
    { return statementIndent(state.context, config) }
  if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^\s*(@|\*\/)/.test(textAfter))
    { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

  return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, null, config)
}

function constructorAhead(line, pos) {
  var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
  return match && match[1] == match[2]
}

function localConstructorAhead(line, pos, cx) {
  var ahead = /^~?(\w+)\s*\(/.exec(line.slice(pos));
  if (!ahead) { return false }
  while (cx.name != "Statement") { cx = cx.parent; }
  var className = /\bclass\s+(\w+)/.exec(cx.startLine.slice(cx.startPos));
  return className ? className[1] == ahead[1] : false
}

var scopes = ["Block", "FunctionDef"];

var CppMode = (function (superclass) {
  function CppMode(conf) {
    superclass.call(this, cpp, {
      predicates: {constructorAhead: constructorAhead, localConstructorAhead: localConstructorAhead}
    });
    this.conf = conf;
  }

  if ( superclass ) CppMode.__proto__ = superclass;
  CppMode.prototype = Object.create( superclass && superclass.prototype );
  CppMode.prototype.constructor = CppMode;

  CppMode.prototype.token = function token$$1 (stream, state) {
    return markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state)
  };

  CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
    return indent(state, textAfter, line, this.conf)
  };

  return CppMode;
}(CodeMirror.GrammarMode));

CppMode.prototype.electricInput = /^\s*(?:case .*?:|default:|\{\}?|\})$/;
CppMode.prototype.blockCommentStart = "/*";
CppMode.prototype.blockCommentEnd = "*/";
CppMode.prototype.blockCommentContinue = " * ";
CppMode.prototype.lineComment = "//";
CppMode.prototype.fold = "brace";

CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
