(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
	typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
	(factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

var e = [/^class(?![a-zA-Z\¡-\￿_0-9])/, /^(?:struct|union)(?![a-zA-Z\¡-\￿_0-9])/, /^namespace(?![a-zA-Z\¡-\￿_0-9])/, /^throw(?![a-zA-Z\¡-\￿_0-9])/, /^try(?![a-zA-Z\¡-\￿_0-9])/, /^asm(?![a-zA-Z\¡-\￿_0-9])/, /^using(?![a-zA-Z\¡-\￿_0-9])/, /^export(?![a-zA-Z\¡-\￿_0-9])/, /^enum(?![a-zA-Z\¡-\￿_0-9])/, /^for(?![a-zA-Z\¡-\￿_0-9])/, /^while(?![a-zA-Z\¡-\￿_0-9])/, /^do(?![a-zA-Z\¡-\￿_0-9])/, /^if(?![a-zA-Z\¡-\￿_0-9])/, /^switch(?![a-zA-Z\¡-\￿_0-9])/, /^(?:break|continue)(?![a-zA-Z\¡-\￿_0-9])/, /^goto(?![a-zA-Z\¡-\￿_0-9])/, /^return(?![a-zA-Z\¡-\￿_0-9])/, /^default(?![a-zA-Z\¡-\￿_0-9])/, /^case(?![a-zA-Z\¡-\￿_0-9])/, /^alignas(?![a-zA-Z\¡-\￿_0-9])/, /^(?:0x[0-9a-fA-F\']+|0b[01\']+|(?:[0-9][0-9\']*(?:\.[0-9\']*)?|\.[0-9][0-9\']*)(?:[eE]\-?[0-9\']*)?)[LlUuFf]?/, /^virtual(?![a-zA-Z\¡-\￿_0-9])/, /^(?:private|public|protected)(?![a-zA-Z\¡-\￿_0-9])/, /^catch(?![a-zA-Z\¡-\￿_0-9])/, /^typename(?![a-zA-Z\¡-\￿_0-9])/, /^template(?![a-zA-Z\¡-\￿_0-9])/, /^else(?![a-zA-Z\¡-\￿_0-9])/, /^(?:\:\:|[a-zA-Z\¡-\￿_][a-zA-Z\¡-\￿_0-9]* *\:\:)/, /^(?!(?:new|delete)(?![a-zA-Z\¡-\￿_0-9]))/, /^(?:inline|virtual|explicit)(?![a-zA-Z\¡-\￿_0-9])/, /^(?:register|static|extern|typedef|auto)(?![a-zA-Z\¡-\￿_0-9])/, /^(?:const|volatile)(?![a-zA-Z\¡-\￿_0-9])/, /^(?:unsigned|signed|long)(?![a-zA-Z\¡-\￿_0-9])/, /^(?:int|float|double)(?![a-zA-Z\¡-\￿_0-9])/, /^[a-zA-Z\¡-\￿_][a-zA-Z\¡-\￿_0-9]*/, [0, /^[a-zA-Z\¡-\￿_]/, /^[a-zA-Z\¡-\￿_0-9]*/, [5, 293]], /^delete(?![a-zA-Z\¡-\￿_0-9])/, /^new(?![a-zA-Z\¡-\￿_0-9])/, /^sizeof(?![a-zA-Z\¡-\￿_0-9])/, /^this(?![a-zA-Z\¡-\￿_0-9])/, /^(?:dynamic|static|const|reinterpret)_cast(?![a-zA-Z\¡-\￿_0-9])/, /^(?:true|false|null)(?![a-zA-Z\¡-\￿_0-9])/, /^operator(?![a-zA-Z\¡-\￿_0-9])/, /^(?:\!|\+|\-|\/|\*|\%|\>\>?|\<\<?|\=|\|\|?|\&\&?)\=?/, /^\~?[a-zA-Z\¡-\￿_][a-zA-Z\¡-\￿_0-9]*/, /^noexcept(?![a-zA-Z\¡-\￿_0-9])/, /^(?:\+\+|\-\-)/, /^[a-zA-Z\¡-\￿_][a-zA-Z\¡-\￿_0-9]*(?=\()/, [1, "\n", "\t", " "], /^\@(?:member|param|arg(?:ument)?|module|namespace|typedef)(?![a-zA-Z\¡-\￿_])/, /^\@[a-zA-Z\¡-\￿_]+/, /^[a-zA-Z\¡-\￿_]+/, [0, /^(?!\*\/|\@|\{)/, /^[^]/], /^friend(?![a-zA-Z\¡-\￿_0-9])/];
var nodes = [
  [2, 6, 2, {"name":"preprocessorLine","token":"meta"},
   0, 2],
  [/^[^]/, 0],
  [1, 9, 3],
  [2, 11, 4, {"name":"Statement"}],
  [0, 2,
   0, 1],
  [3, "keyword", e[8], -1,
   3, "keyword", e[16], -1,
   3, "keyword", e[12], -1,
   3, "keyword", e[26], -1,
   3, "keyword", e[9], -1,
   3, "keyword", e[10], -1,
   3, "keyword", e[11], -1,
   3, "keyword", e[14], -1,
   3, "keyword", e[15], -1,
   3, "keyword", e[17], -1,
   3, "keyword", e[18], -1,
   3, "keyword", e[13], -1,
   3, "keyword", e[1], -1,
   3, "keyword", e[38], -1,
   3, "keyword", e[29], -1,
   3, "keyword", e[30], -1,
   3, "type", e[32], -1,
   3, "type", e[33], -1,
   3, "keyword", e[31], -1,
   3, "atom", e[41], -1,
   1, 165, -1,
   3, "number", e[20], -1,
   2, 168, -1, {"name":"string","token":"string"},
   2, 172, -1, {"name":"prefixOp","token":"operator"},
   3, "operator", e[46], -1,
   3, "operator", e[43], -1,
   2, 173, -1, {"name":"comment","token":"comment"},
   3, "keyword", e[2], -1,
   3, "keyword", e[24], -1,
   3, "keyword", e[37], -1,
   3, "keyword", e[36], -1,
   3, "keyword", e[39], -1,
   3, "keyword", e[4], -1,
   3, "keyword", e[23], -1,
   3, "keyword", e[3], -1,
   3, "keyword", e[45], -1,
   3, "keyword", e[5], -1,
   3, "keyword", e[7], -1,
   3, "keyword", e[25], -1,
   3, "keyword", e[0], -1,
   3, "keyword", e[21], -1,
   3, "keyword", e[22], -1,
   3, "keyword", e[53], -1,
   3, "keyword", e[42], -1,
   3, "keyword", e[6], -1,
   3, "keyword", e[19], -1,
   3, "keyword", e[40], -1,
   /^[^]/, -1],
  ["#", 7],
  [/^(?!\/\/|\/\*|\\)./, 7,
   "\\", 8,
   0, -1],
  [/^[^]/, 7],
  [/^[ \t]/, 9,
   "\n", 10,
   2, 173, 9, {"name":"comment","token":"comment"},
   0, -1],
  [2, 6, 9, {"name":"preprocessorLine","token":"meta"},
   0, 9],
  [3, "keyword", e[0], 12,
   3, "keyword", e[1], 12,
   3, "keyword", e[2], 32,
   3, "keyword", e[3], 40,
   3, "keyword", e[4], 44,
   3, "keyword", e[5], 59,
   3, "keyword", e[6], 65,
   3, "keyword", e[7], 73,
   0, 73,
   [7, "constructorAhead"], 83,
   0, 86,
   3, "keyword", e[8], 97,
   3, "keyword", e[9], 101,
   3, "keyword", e[10], 102,
   3, "keyword", e[11], 103,
   3, "keyword", e[12], 127,
   3, "keyword", e[13], 135,
   2, 179, -1, {"name":"Block"},
   3, "keyword", e[14], 139,
   3, "keyword", e[15], 141,
   3, "keyword", e[16], 145,
   3, "keyword", e[1], 149,
   2, 183, 155, {"name":"DeclType"},
   3, "keyword", e[17], 157,
   3, "keyword", e[18], 158,
   [0, /^[a-zA-Z\¡-\￿_]/, /^[a-zA-Z\¡-\￿_0-9]*/, [5, 200]], 157,
   ";", -1,
   1, 201, 163],
  [1, 9, 13],
  [3, "keyword", e[19], 14,
   0, 15],
  [1, 9, 16],
  [1, 9, 17],
  ["(", 18],
  [1, 232, 19],
  [1, 9, 20],
  [1, 9, 21],
  [3, "number", e[20], 22],
  [":", 23,
   0, 24],
  [1, 9, 25],
  [1, 9, 26],
  [1, 9, 27],
  [")", 15],
  [3, "keyword", e[21], 28,
   0, 28],
  [2, 235, -1, {"name":"ClassBody"}],
  [1, 9, 29],
  [3, "keyword", e[22], 30,
   0, 30],
  [1, 9, 31],
  [1, 241, 24],
  [1, 9, 33],
  [1, 232, 34,
   0, 34],
  [1, 9, 35],
  [3, "operator", "=", 36,
   2, 179, -1, {"name":"Block"}],
  [1, 9, 37],
  [1, 165, 38],
  [1, 9, 39],
  [";", -1],
  [1, 9, 41],
  [1, 201, 42],
  [1, 9, 43],
  [";", -1],
  [1, 9, 45],
  [2, 179, 46, {"name":"Block"}],
  [1, 9, 47],
  [3, "keyword", e[23], 48,
   0, -1],
  [1, 9, 49],
  ["(", 50],
  [1, 9, 51],
  [1, 241, 52],
  [1, 9, 53],
  [1, 232, 54,
   0, 54],
  [1, 9, 55],
  [")", 56],
  [1, 9, 57],
  [2, 179, 58, {"name":"Block"}],
  [1, 9, 47],
  [1, 9, 60],
  ["{", 61],
  [1, 9, 62],
  [2, 168, 63, {"name":"string","token":"string"}],
  [1, 9, 64],
  ["}", -1],
  [1, 9, 66],
  [3, "keyword", e[24], 67,
   3, "keyword", e[2], 68,
   0, 68],
  [1, 9, 69],
  [1, 9, 70],
  [1, 241, 71],
  [1, 165, 71],
  [1, 9, 72],
  [";", -1],
  [1, 9, 74],
  [3, "keyword", e[25], 75],
  [1, 9, 76],
  ["<", 77],
  [1, 9, 78],
  [1, 252, 79],
  [1, 9, 80],
  [">", 81],
  [1, 9, 82],
  [2, 11, -1, {"name":"Statement"}],
  [1, 232, 84],
  [1, 9, 85],
  [2, 266, -1, {"name":"FunctionDef"}],
  [3, "meta", e[27], 87],
  [1, 9, 88],
  [0, 86,
   e[28], 89,
   2, 292, 90, {"name":"qualifiedVariableName","token":"qualified"}],
  [3, "type", e[35], 91],
  [1, 9, 92],
  [1, 9, 93],
  [1, 297, 94,
   ";", -1],
  [1, 312, 95,
   1, 9, 96],
  [1, 9, 92],
  [1, 9, 93],
  [1, 319, -1],
  [1, 9, 98],
  [1, 232, 99,
   0, 99],
  [1, 9, 100],
  [2, 329, -1, {"name":"BlockOf"},
   0, -1],
  [1, 9, 104],
  [1, 9, 105],
  [1, 9, 106],
  ["(", 107],
  [2, 347, 108, {"name":"CondExpr"}],
  [2, 11, 109, {"name":"Statement"}],
  [1, 9, 110],
  [1, 9, 111],
  [1, 9, 112],
  [2, 11, 113, {"name":"Statement"}],
  [2, 11, -1, {"name":"Statement"}],
  [3, "keyword", e[10], 114],
  [1, 9, 115],
  [1, 9, 116],
  [1, 201, 117,
   0, 117],
  [2, 347, 118, {"name":"CondExpr"}],
  [1, 9, 119],
  [1, 9, 120],
  [";", 121],
  [";", -1],
  [1, 9, 122],
  [1, 201, 123,
   0, 123],
  [1, 9, 124],
  [")", 125],
  [1, 9, 126],
  [2, 11, -1, {"name":"Statement"}],
  [1, 9, 128],
  [2, 347, 129, {"name":"CondExpr"}],
  [1, 9, 130],
  [2, 11, 131, {"name":"Statement"}],
  [1, 9, 132],
  [3, "keyword", e[26], 133,
   0, -1],
  [1, 9, 134],
  [2, 11, -1, {"name":"Statement"}],
  [1, 9, 136],
  [2, 347, 137, {"name":"CondExpr"}],
  [1, 9, 138],
  [2, 179, -1, {"name":"Block"}],
  [1, 9, 140],
  [";", -1],
  [1, 9, 142],
  [e[34], 143],
  [1, 9, 144],
  [";", -1],
  [1, 9, 146],
  [1, 201, 147,
   0, 147],
  [1, 9, 148],
  [";", -1],
  [1, 9, 150],
  [1, 232, 151,
   0, 151],
  [1, 9, 152],
  [2, 352, 153, {"name":"BlockOf"},
   0, 153],
  [1, 9, 154],
  [";", -1],
  [1, 9, 156],
  [1, 319, -1],
  [1, 9, 159],
  [1, 9, 160],
  [":", 161],
  [1, 201, 157],
  [1, 9, 162],
  [2, 11, -1, {"name":"Statement"}],
  [1, 9, 164],
  [";", -1],
  [0, 166,
   3, "builtin", e[47], -1,
   3, "variable", e[44], -1],
  [3, "meta", e[27], 167],
  [0, 166,
   2, 292, -1, {"name":"qualifiedVariableName","token":"qualified"}],
  [/^(?:(?:L|u8?|U)(?=[\'\"]))?/, 169],
  [/^\'(?:\\.(?:(?!\').)*|.)\'/, -1,
   "\"", 170],
  ["\\", 171,
   /^(?!\")./, 170,
   "\"", -1],
  [/^[^]/, 170],
  [3, "keyword", e[24], -1,
   /^(?:\+\+|\-\-|\!|\~|\&|\*)/, -1],
  ["/**", 174,
   "/*", 178,
   /^\/\/.*/, -1],
  [0, 175,
   2, 374, 174, {"name":"doccomment.braced"},
   0, 176],
  [e[52], 177],
  [2, 382, 176, {"name":"doccomment.tagGroup"},
   "*/", -1],
  [0, 175,
   0, 174],
  [[0, /^(?!\*\/)/, /^[^]/], 178,
   "*/", -1],
  ["{", 180],
  [1, 9, 181],
  [2, 11, 182, {"name":"Statement"},
   "}", -1],
  [1, 9, 181],
  [0, 184,
   0, 185,
   e[28], 196],
  [3, "keyword", e[29], 186,
   3, "keyword", e[30], 186,
   3, "keyword", e[31], 186],
  [3, "type", e[32], 187],
  [1, 9, 188],
  [1, 9, 189],
  [0, 184,
   0, 190,
   0, 191],
  [0, 185,
   3, "type", e[33], 192,
   0, 192],
  [3, "type", e[32], 193],
  [3, "meta", e[27], 191,
   3, "type", e[34], 192],
  [1, 9, 194],
  [0, 190,
   3, "type", e[33], 192,
   0, 192],
  [1, 312, 195,
   0, -1],
  [1, 9, 194],
  [3, "type", e[35], 197],
  [1, 9, 198],
  [1, 312, 199,
   0, -1],
  [1, 9, 198],
  [e[48], 200,
   /^\:(?!\:)/, -1],
  [3, "keyword", e[36], 202,
   3, "keyword", e[37], 203,
   2, 172, 202, {"name":"prefixOp","token":"operator"},
   3, "keyword", e[38], 202,
   3, "keyword", e[39], 229,
   "[", 209,
   3, "keyword", e[40], 210,
   2, 390, 211, {"name":"ParenExpr"},
   3, "atom", e[41], 229,
   3, "number", e[20], 229,
   2, 168, 229, {"name":"string","token":"string"},
   2, 395, 229, {"name":"BlockOf"},
   1, 165, 229],
  [1, 9, 201],
  [1, 9, 204],
  ["(", 205,
   0, 202],
  [1, 9, 206],
  [1, 201, 207],
  [1, 9, 208],
  [")", 202],
  [1, 9, 212],
  [1, 9, 213],
  [1, 9, 214],
  [1, 405, 215],
  ["<", 216],
  [1, 201, 229,
   0, 229],
  [1, 9, 217],
  [1, 9, 218],
  ["]", 219],
  [1, 241, 220],
  [1, 9, 221],
  [1, 9, 222],
  [2, 266, 229, {"name":"FunctionDef"}],
  [">", 223],
  [1, 9, 224],
  ["(", 225],
  [1, 9, 226],
  [1, 201, 227],
  [1, 9, 228],
  [")", 229],
  [1, 9, 230],
  [1, 297, 231,
   0, -1],
  [1, 9, 230],
  [3, "keyword", e[42], 233,
   0, 234],
  [3, "operator", e[43], -1,
   2, 172, -1, {"name":"prefixOp","token":"operator"}],
  [3, "meta", e[27], 234,
   3, "def", e[44], -1],
  ["{", 236],
  [1, 9, 237],
  [3, "keyword", e[22], 238,
   2, 415, 239, {"name":"ObjectMember"},
   "}", -1],
  [1, 9, 240],
  [1, 9, 237],
  [":", 239],
  [3, "keyword", e[24], 242,
   0, 244],
  [1, 9, 243],
  [1, 241, -1],
  [3, "keyword", e[29], 245,
   3, "keyword", e[30], 245,
   3, "keyword", e[31], 245,
   0, 246,
   0, 247],
  [1, 9, 244],
  [3, "type", e[32], 248],
  [3, "meta", e[27], 247,
   3, "type", e[34], 249],
  [0, 246,
   3, "type", e[33], 249,
   0, 249],
  [1, 9, 250],
  [1, 312, 251,
   0, -1],
  [1, 9, 250],
  [1, 425, 253,
   0, 254,
   0, -1],
  [1, 9, 255],
  [3, "keyword", e[29], 256,
   3, "keyword", e[30], 256,
   1, 232, 257],
  [",", 258,
   0, -1],
  [1, 9, 254],
  [1, 9, 259],
  [1, 9, 260],
  [1, 436, 253,
   0, 253],
  [1, 425, 261,
   0, 262],
  [1, 9, 255],
  [3, "keyword", e[29], 263,
   3, "keyword", e[30], 263,
   1, 232, 264],
  [1, 9, 262],
  [1, 9, 265],
  [1, 436, 261,
   0, 261],
  [2, 439, 267, {"name":"ParamList"}],
  [1, 9, 268],
  [3, "keyword", e[31], 269,
   /^(?:\&|\&\&)?/, 270],
  [1, 9, 268],
  [1, 9, 271],
  [3, "keyword", e[45], 272,
   3, "keyword", e[3], 273,
   0, 284],
  [1, 9, 274],
  [1, 9, 275],
  ["(", 276,
   0, 284],
  ["(", 277],
  [1, 9, 278],
  [1, 9, 279],
  [1, 201, 280],
  [1, 444, 281],
  [1, 9, 282],
  [1, 9, 283],
  [")", 284],
  [")", 284],
  [1, 9, 285],
  ["->", 286,
   0, 288],
  [1, 9, 287],
  [1, 241, 288],
  [1, 9, 289],
  [2, 450, 290, {"name":"InitializerList"},
   0, 290],
  [1, 9, 291],
  [";", -1,
   2, 179, -1, {"name":"Block"}],
  [3, "variable", e[44], -1],
  [/^(?![a-zA-Z\¡-\￿_0-9])/, 294],
  [1, 9, 295],
  [1, 312, 295,
   1, 9, 296],
  [/^[a-zA-Z\¡-\￿_]/, -1],
  [2, 453, -1, {"name":"ArgList"},
   "[", 298,
   3, "operator", e[46], -1,
   /^(?:\-\>|\.)/, 302,
   3, "operator", e[43], 304,
   "?", 306],
  [1, 9, 299],
  [1, 201, 300],
  [1, 9, 301],
  ["]", -1],
  [1, 9, 303],
  [3, "builtin", e[47], -1,
   3, "property", e[34], -1],
  [1, 9, 305],
  [1, 201, -1],
  [1, 9, 307],
  [1, 201, 308],
  [1, 9, 309],
  [":", 310],
  [1, 9, 311],
  [1, 201, -1],
  [2, 458, -1, {"name":"TemplateArgs"},
   "::", 313,
   "[", 315,
   /^[\*\&]/, -1,
   3, "keyword", e[31], -1],
  [1, 9, 314],
  [1, 241, -1],
  [1, 9, 316],
  [3, "number", e[20], 317,
   0, 317],
  [1, 9, 318],
  ["]", -1],
  [1, 232, 320],
  [1, 9, 321],
  [2, 266, -1, {"name":"FunctionDef"},
   1, 436, 322,
   0, 322],
  [1, 9, 323],
  [",", 324,
   ";", -1],
  [1, 9, 325],
  [1, 232, 326],
  [1, 9, 327],
  [1, 436, 328,
   0, 328],
  [1, 9, 323],
  ["{", 330],
  [1, 9, 331],
  [1, 232, 332,
   0, 345],
  [1, 9, 333],
  [3, "operator", "=", 334,
   0, 335],
  [1, 9, 336],
  [1, 9, 337],
  [1, 201, 335],
  [",", 338,
   0, 345],
  [1, 9, 339],
  [1, 232, 340],
  [1, 9, 341],
  [3, "operator", "=", 342,
   0, 343],
  [1, 9, 344],
  [1, 9, 337],
  [1, 201, 343],
  [1, 9, 346],
  ["}", -1],
  ["(", 348],
  [1, 9, 349],
  [1, 201, 350,
   0, 350],
  [1, 9, 351],
  [")", -1],
  ["{", 353],
  [1, 9, 354],
  [1, 241, 355,
   0, 372],
  [1, 9, 356],
  [3, "property", e[34], 357,
   0, 357],
  [1, 9, 358],
  [":", 359,
   0, 360],
  [1, 9, 361],
  [1, 9, 362],
  [3, "number", e[20], 360],
  [";", 363,
   0, 372],
  [1, 9, 364],
  [1, 241, 365],
  [1, 9, 366],
  [3, "property", e[34], 367,
   0, 367],
  [1, 9, 368],
  [":", 369,
   0, 370],
  [1, 9, 371],
  [1, 9, 362],
  [3, "number", e[20], 370],
  [1, 9, 373],
  ["}", -1],
  ["{", 375],
  [3, "tag", e[49], 376,
   3, "tag", e[50], 377,
   2, 463, 381, {"name":"doccomment.type","token":"type"}],
  [e[48], 376,
   "{", 378,
   0, 377],
  [[0, /^(?!\}|\*\/)/, /^[^]/], 377,
   0, 381],
  [2, 463, 379, {"name":"doccomment.type","token":"type"}],
  ["}", 380],
  [e[48], 380,
   3, "def", e[51], 377,
   0, 377],
  ["}", -1],
  [3, "tag", e[49], 383,
   3, "tag", e[50], 387],
  [e[48], 383,
   "{", 384,
   0, 387],
  [2, 463, 385, {"name":"doccomment.type","token":"type"}],
  ["}", 386],
  [e[48], 386,
   3, "def", e[51], 387,
   0, 387],
  [0, 388,
   2, 374, 387, {"name":"doccomment.braced"},
   0, -1],
  [e[52], 389],
  [0, 388,
   0, 387],
  ["(", 391],
  [1, 9, 392],
  [1, 201, 393,
   0, 393],
  [1, 9, 394],
  [")", -1],
  ["{", 396],
  [1, 9, 397],
  [1, 201, 398,
   0, 403],
  [1, 9, 399],
  [",", 400,
   0, 403],
  [1, 9, 401],
  [1, 201, 402],
  [1, 9, 399],
  [1, 9, 404],
  ["}", -1],
  ["&", 406,
   "=", 407,
   3, "keyword", e[39], 407,
   0, -1],
  [1, 9, 408],
  [1, 9, 409],
  [1, 165, 407,
   0, 407],
  [",", 410,
   0, -1],
  [1, 9, 411],
  ["&", 412,
   "=", 413,
   3, "keyword", e[39], 413],
  [1, 9, 414],
  [1, 9, 409],
  [1, 165, 413,
   0, 413],
  [3, "keyword", e[53], 416,
   3, "def", /^\~?[a-zA-Z\¡-\￿_][a-zA-Z\¡-\￿_0-9]*(?= *\()/, 421,
   0, 417],
  [1, 9, 415],
  [3, "keyword", e[29], 418,
   3, "keyword", e[30], 418,
   3, "keyword", e[31], 418,
   1, 241, 419],
  [1, 9, 417],
  [1, 9, 420],
  [1, 232, 421],
  [1, 9, 422],
  [1, 436, 423,
   0, 423,
   2, 266, -1, {"name":"FunctionDef"}],
  [1, 9, 424],
  [";", -1],
  [3, "keyword", e[25], 426,
   0, 428],
  [1, 9, 427],
  [2, 458, 428, {"name":"TemplateArgs"}],
  [1, 9, 429],
  [3, "keyword", e[0], 430,
   3, "keyword", e[24], 430],
  [1, 9, 431],
  [1, 232, 432],
  [1, 9, 433],
  [3, "operator", "=", 434,
   0, -1],
  [1, 9, 435],
  [1, 165, -1],
  [3, "operator", "=", 437,
   2, 395, -1, {"name":"BlockOf"}],
  [1, 9, 438],
  [1, 201, -1],
  ["(", 440],
  [1, 9, 441],
  [1, 464, 442],
  [1, 9, 443],
  [")", -1],
  [1, 241, 445,
   0, -1],
  [1, 9, 446],
  [",", 447,
   0, -1],
  [1, 9, 448],
  [1, 241, 449],
  [1, 9, 446],
  [":", 451,
   0, -1],
  [1, 9, 452],
  [1, 474, -1],
  ["(", 454],
  [1, 9, 455],
  [1, 480, 456],
  [1, 9, 457],
  [")", -1],
  ["<", 459],
  [1, 9, 460],
  [1, 486, 461],
  [1, 9, 462],
  [">", -1],
  [1, 500, -1],
  [1, 241, 465,
   0, -1],
  [1, 9, 466],
  [1, 232, 467,
   0, 467],
  [1, 9, 468],
  [",", 469,
   0, -1],
  [1, 9, 470],
  [1, 241, 471],
  [1, 9, 472],
  [1, 232, 473,
   0, 473],
  [1, 9, 468],
  [1, 504, 475,
   0, -1],
  [1, 9, 476],
  [",", 477,
   0, -1],
  [1, 9, 478],
  [1, 504, 479],
  [1, 9, 476],
  [1, 201, 481,
   0, -1],
  [1, 9, 482],
  [",", 483,
   0, -1],
  [1, 9, 484],
  [1, 201, 485],
  [1, 9, 482],
  [1, 425, 487,
   0, 488,
   0, -1],
  [1, 9, 489],
  [3, "keyword", e[29], 490,
   3, "keyword", e[30], 490,
   1, 241, 491],
  [",", 492,
   0, -1],
  [1, 9, 488],
  [1, 9, 493],
  [1, 9, 494],
  [1, 436, 487,
   0, 487],
  [1, 425, 495,
   0, 496],
  [1, 9, 489],
  [3, "keyword", e[29], 497,
   3, "keyword", e[30], 497,
   1, 241, 498],
  [1, 9, 496],
  [1, 9, 499],
  [1, 436, 495,
   0, 495],
  [/^(?!\}|\*\/)/, 501,
   0, -1],
  ["{", 502,
   /^[^]/, 500],
  [1, 500, 503],
  [/^\}?/, 500],
  [3, "property", e[34], 505],
  [1, 9, 506],
  ["(", 507,
   "{", 508],
  [1, 9, 509],
  [1, 9, 510],
  [1, 480, 511],
  [1, 480, 512],
  [1, 9, 513],
  [1, 9, 514],
  [")", -1],
  ["}", -1]
];
var start = 0;
var token = 5;


var cpp = Object.freeze({
	nodes: nodes,
	start: start,
	token: token
});

function storeLocal(context, name, scopes) {
  for (var cx = context; cx; cx = cx.parent)
    { if (scopes.indexOf(cx.name) > -1)
      { return (cx.locals || (cx.locals = [])).push(name) } }
}
function isLocal(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
  return false
}

function markLocals(type, scopes, stream, state) {
  if (type == "def") { storeLocal(state.context, stream.current(), scopes); }
  else if (type == "variable" && isLocal(state.context, stream.current())) { type = "variable-2"; }
  return type
}

function hasSubStatement(context) {
  var m = /^(if|for|do|while)\b/.exec(context.startLine.slice(context.startPos));
  return m && m[1]
}

function isSwitch(context) {
  return context && context.name == "Statement" &&
    /^switch\b/.test(context.startLine.slice(context.startPos))
}

function isLabel(text) {
  return text && /^\s*(case|default)\b/.test(text)
}

function aligned(cx) {
  return !/^\s*((\/\/.*)?$|.*=>)/.test(cx.startLine.slice(cx.startPos + 1))
}

var bracketed = {
  Block: "}", BlockOf: "}", ClassBody: "}", ObjectLiteral: "}", EnumBody: "}", ArrayInitializer: "}",
  ArrayLiteral: "]",
  ParamList: ")", SimpleParamList: ")", ArgList: ")", ParenExpr: ")", CondExpr: ")", TemplateArgs: ")", ForSpec: ")",
  TypeParams: ">", TypeArgs: ">"
};

function statementIndent(cx, config) {
  for (;; cx = cx.parent) {
    if (!cx) { return 0 }
    if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem" || cx.name == "NewExpr")
      { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) }
  }
}

function plus(result, add) {
  return typeof result == "number" ? result + add : result
}

function findIndent(cx, textAfter, curLine, config) {
  if (!cx) { return 0 }
  if (cx.name == "string" || cx.name == "comment") { return CodeMirror.Pass }

  var brack = bracketed[cx.name];
  if (brack) {
    var closed = textAfter && textAfter.charAt(0) == brack;
    if (config.align !== false && curLine != cx.startLine && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + (closed ? 0 : 1) }

    if (cx.name == "Block" || cx.name == "ClassBody" || cx.name == "BlockOf" || cx.name == "EnumBody") {
      // Skip wrapping statement context
      var skipCx = cx;
      if (cx.parent && cx.parent.name == "Statement" && cx.parent.parent &&
          cx.parent.parent.name == "Statement" && hasSubStatement(cx.parent.parent))
        { skipCx = cx.parent.parent; }
      return statementIndent(skipCx, config) + (
        /^(public|private|protected)\s*:/.test(textAfter) ? 1 :
        closed ? 0 :
        isSwitch(cx.parent) && !isLabel(textAfter) ? 2 * config.indentUnit
        : config.indentUnit
      )
    }

    var flat = closed && brack != ")" || curLine == cx.startLine && cx.name != "CondExpr";
    return findIndent(cx.parent, closed ? null : textAfter, cx.startLine, config) +
      (flat ? 0 : config.indentUnit * (brack == ")" || brack == ">" ? 2 : 1))
  } else if (cx.name == "Statement" || cx.name == "ObjectMember" || cx.name == "ClassItem") {
    var base = statementIndent(cx, config);
    if (!curLine && hasSubStatement(cx))
      { return base + (/^else\b/.test(textAfter) ? 0 : config.indentUnit) }
    var flat$1 = curLine == cx.startLine ||
        curLine && CodeMirror.countColumn(curLine, null, config.tabSize) <= base;
    return base + (flat$1 ? 0 : 2 * config.indentUnit)
  } else if (cx.name == "ArrowRest") {
    return plus(findIndent(cx.parent, textAfter, cx.startLine, config), config.indentUnit)
  } else {
    return plus(findIndent(cx.parent, textAfter, curLine, config),
                (cx.name == "InitializerList" ? 2 : cx.name == "ThrowsClause" ? 2 * config.indentUnit : 0))
  }
}

function indent(state, textAfter, line, config) {
  if (textAfter.charAt(0) == "#") { return 0 }
  var top = state.context && state.context.name;
  if (top == "DeclType" || top == "BeforeStatement" || top == "AnnotationHead")
    { return statementIndent(state.context, config) }
  if ((top == "doccomment.braced" || top == "doccomment.tagGroup") && !/^\s*(@|\*\/)/.test(textAfter))
    { return CodeMirror.countColumn(state.context.startLine, null, config.tabSize) + 2 * config.indentUnit }

  return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, null, config)
}

function constructorAhead(line, pos) {
  var match = /^(\w+)::~?(\w+)/.exec(line.slice(pos));
  return match && match[1] == match[2]
}

var scopes = ["Block", "FunctionDef"];

var CppMode = (function (superclass) {
  function CppMode(conf) {
    superclass.call(this, cpp, {
      predicates: {constructorAhead: constructorAhead}
    });
    this.conf = conf;
  }

  if ( superclass ) CppMode.__proto__ = superclass;
  CppMode.prototype = Object.create( superclass && superclass.prototype );
  CppMode.prototype.constructor = CppMode;

  CppMode.prototype.token = function token$$1 (stream, state) {
    return markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state)
  };

  CppMode.prototype.indent = function indent$1 (state, textAfter, line) {
    return indent(state, textAfter, line, this.conf)
  };

  return CppMode;
}(CodeMirror.GrammarMode));

CppMode.prototype.electricInput = /^\s*(?:case .*?:|default:|\{\}?|\})$/;
CppMode.prototype.blockCommentStart = "/*";
CppMode.prototype.blockCommentEnd = "*/";
CppMode.prototype.lineComment = "//";
CppMode.prototype.fold = "brace";

CodeMirror.defineMode("google-cpp", function (conf) { return new CppMode(conf); });

})));
