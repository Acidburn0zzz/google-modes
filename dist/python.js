(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('codemirror'), require('codemirror-grammar-mode')) :
	typeof define === 'function' && define.amd ? define(['codemirror', 'codemirror-grammar-mode'], factory) :
	(factory(global.CodeMirror));
}(this, (function (CodeMirror) { 'use strict';

var e = [/^if(?![a-zA-Z\¡-\￿_0-9_])/, /^(?:while|elif)(?![a-zA-Z\¡-\￿_0-9_])/, /^else(?![a-zA-Z\¡-\￿_0-9_])/, /^(?:try|finally)(?![a-zA-Z\¡-\￿_0-9_])/, /^for(?![a-zA-Z\¡-\￿_0-9_])/, /^except(?![a-zA-Z\¡-\￿_0-9_])/, /^async(?![a-zA-Z\¡-\￿_0-9_])/, /^in(?![a-zA-Z\¡-\￿_0-9_])/, /^as(?![a-zA-Z\¡-\￿_0-9_])/, /^[a-zA-Z\¡-\￿__][a-zA-Z\¡-\￿_0-9_]*/, /^with(?![a-zA-Z\¡-\￿_0-9_])/, /^def(?![a-zA-Z\¡-\￿_0-9_])/, /^class(?![a-zA-Z\¡-\￿_0-9_])/, /^(?:pass|break|continue)(?![a-zA-Z\¡-\￿_0-9_])/, /^del(?![a-zA-Z\¡-\￿_0-9_])/, /^(?:return|assert)(?![a-zA-Z\¡-\￿_0-9_])/, /^raise(?![a-zA-Z\¡-\￿_0-9_])/, /^import(?![a-zA-Z\¡-\￿_0-9_])/, /^from(?![a-zA-Z\¡-\￿_0-9_])/, /^(?:global|nonlocal)(?![a-zA-Z\¡-\￿_0-9_])/, /^[\*\+\-\~]/, /^(?:not|await)(?![a-zA-Z\¡-\￿_0-9_])/, /^[a-zA-Z\¡-\￿__][a-zA-Z\¡-\￿_0-9_]*(?= *(?:\=|in(?![a-zA-Z\¡-\￿_0-9_])))/, /^(?:(?:0b|OB)[01_]+|(?:0o|0O)[0-7_]+|(?:0x|OX)[0-9a-fA-F_]+|(?:[0-9][0-9_]*(?:\.[0-9_]+)?|\.[0-9_]+)(?:[eE][\+\-]?[0-9_]+)?[jJ]?)/, /^(?:None|True|False)(?![a-zA-Z\¡-\￿_0-9_])/, /^self(?![a-zA-Z\¡-\￿_0-9_])/, /^yield(?![a-zA-Z\¡-\￿_0-9_])/, /^lambda(?![a-zA-Z\¡-\￿_0-9_])/, /^(?:(?:\^|\&|\||\<\<|\>\>|\+|\-|\*\*?|\@|\/|\%|\/)\=?|\=|\<|\>|\=\=|\>\=|\<\=|\<\>|\!\=)/, /^(?:or|and|in|is(?: +not)?|not(?: +in)?)(?![a-zA-Z\¡-\￿_0-9_])/, /^[a-zA-Z\¡-\￿__][a-zA-Z\¡-\￿_0-9_]*(?=\()/, /^(?:\*|\*\*)/];
var nodes = [
  [1, 6, 2],
  [/^[^]/, 0],
  [1, 6, 3],
  ["\n", 4,
   2, 8, 4, {"name":"Statement"},
   0, 1],
  [1, 6, 3],
  [3, "keyword", e[0], -1,
   3, "keyword", e[1], -1,
   3, "keyword", e[2], -1,
   3, "keyword", e[3], -1,
   3, "keyword", e[4], -1,
   3, "keyword", e[7], -1,
   3, "keyword", e[8], -1,
   3, "keyword", e[6], -1,
   3, "keyword", e[11], -1,
   3, "keyword", e[5], -1,
   3, "keyword", e[12], -1,
   3, "keyword", e[10], -1,
   3, "keyword", e[27], -1,
   3, "keyword", e[14], -1,
   3, "keyword", e[26], -1,
   3, "keyword", e[16], -1,
   3, "keyword", e[18], -1,
   3, "keyword", e[17], -1,
   3, "keyword", e[13], -1,
   3, "keyword", e[19], -1,
   3, "keyword", e[15], -1,
   3, "keyword", e[21], -1,
   3, "atom", e[24], -1,
   3, "atom", e[25], -1,
   3, "keyword", e[29], -1,
   3, "operator", e[28], -1,
   3, "operator", e[20], -1,
   3, "number", e[23], -1,
   2, 50, -1, {"name":"string","token":"string"},
   3, "variable", e[9], -1,
   3, "comment", /^\#.*/, -1,
   /^[^]/, -1],
  [/^[ \t]/, 6,
   3, "comment", /^\#.*/, 6,
   "\\\n", 6,
   [0, /^(?=\n)/, [7, "maySkipNewline"]], 7,
   0, -1],
  ["\n", 6],
  [3, "keyword", e[0], 9,
   3, "keyword", e[1], 9,
   3, "keyword", e[2], 15,
   3, "keyword", e[3], 15,
   3, "keyword", e[4], 19,
   3, "keyword", e[5], 29,
   3, "keyword", e[6], 39,
   1, 52, -1,
   2, 65, 41, {"name":"Annotation","token":"meta"},
   1, 73, 45],
  [1, 6, 10],
  [1, 103, 11],
  [1, 6, 12],
  [":", 13],
  [1, 6, 14],
  [1, 110, -1],
  [1, 6, 16],
  [":", 17],
  [1, 6, 18],
  [1, 110, -1],
  [1, 6, 20],
  [1, 116, 21],
  [1, 6, 22],
  [3, "keyword", e[7], 23],
  [1, 6, 24],
  [1, 122, 25],
  [1, 6, 26],
  [":", 27],
  [1, 6, 28],
  [1, 110, -1],
  [1, 6, 30],
  [1, 103, 31],
  [1, 6, 32],
  [3, "keyword", e[8], 33,
   0, 34],
  [1, 6, 35],
  [1, 6, 36],
  [3, "def", e[9], 34],
  [":", 37],
  [1, 6, 38],
  [1, 110, -1],
  [1, 6, 40],
  [1, 52, -1],
  [1, 6, 42],
  [2, 128, 43, {"name":"ArgList"},
   0, 43],
  [1, 6, 44],
  ["\n", -1],
  [1, 6, 46],
  [";", 47,
   "\n", -1],
  [1, 6, 48],
  [1, 73, 49,
   0, 49],
  [1, 6, 46],
  [/^[uUrRfFbB]+(?=[\'\"])/, 51,
   1, 133, -1],
  [1, 133, -1],
  [3, "keyword", e[10], 53,
   3, "keyword", e[11], 59,
   3, "keyword", e[12], 63],
  [1, 6, 54],
  [1, 138, 55],
  [1, 6, 56],
  [":", 57],
  [1, 6, 58],
  [1, 110, -1],
  [1, 6, 60],
  [3, "def", e[9], 61],
  [1, 6, 62],
  [2, 152, -1, {"name":"FuncDef"}],
  [1, 6, 64],
  [2, 161, -1, {"name":"ClassDef"}],
  ["@", 66],
  [1, 6, 67],
  [e[9], 68],
  [1, 6, 69],
  [".", 70,
   0, -1],
  [1, 6, 71],
  [e[9], 72],
  [1, 6, 69],
  [3, "keyword", e[13], -1,
   3, "keyword", e[14], 74,
   3, "keyword", e[15], 76,
   3, "keyword", e[16], 78,
   3, "keyword", e[17], 84,
   3, "keyword", e[18], 86,
   3, "keyword", e[19], 97,
   3, "def", e[22], 99,
   1, 122, -1],
  [1, 6, 75],
  [1, 122, -1],
  [1, 6, 77],
  [1, 122, -1,
   0, -1],
  [1, 6, 79],
  [1, 103, 80],
  [1, 6, 81],
  [3, "keyword", e[18], 82,
   0, -1],
  [1, 6, 83],
  [1, 103, -1],
  [1, 6, 85],
  [1, 138, -1],
  [1, 6, 87],
  [".", 88,
   1, 103, 89,
   0, 89],
  [1, 6, 87],
  [1, 6, 90],
  [3, "keyword", e[17], 91],
  [1, 6, 92],
  ["*", -1,
   "(", 93,
   1, 168, -1],
  [1, 6, 94],
  [1, 182, 95,
   0, 95],
  [1, 6, 96],
  [")", -1],
  [1, 6, 98],
  [1, 196, -1],
  [1, 6, 100],
  [3, "operator", "=", 101],
  [1, 6, 102],
  [1, 103, -1],
  [3, "operator", e[20], 104,
   3, "keyword", e[21], 104,
   1, 202, 105],
  [1, 6, 103],
  [1, 6, 106],
  [1, 212, 107,
   3, "keyword", e[7], 108,
   0, -1],
  [1, 6, 106],
  [1, 6, 109],
  [1, 103, 107],
  [1, 73, 111,
   2, 223, -1, {"name":"indentedBody"}],
  [1, 6, 112],
  [";", 113,
   "\n", -1],
  [1, 6, 114],
  [1, 73, 115,
   0, 115],
  [1, 6, 112],
  [3, "def", e[22], 117,
   1, 228, 117],
  [1, 6, 118],
  [",", 119,
   0, -1],
  [1, 6, 120],
  [3, "def", e[22], 121,
   1, 228, 121,
   0, 121],
  [1, 6, 118],
  [1, 103, 123],
  [1, 6, 124],
  [",", 125,
   0, -1],
  [1, 6, 126],
  [1, 103, 127,
   0, 127],
  [1, 6, 124],
  ["(", 129],
  [1, 6, 130],
  [1, 233, 131,
   0, 131],
  [1, 6, 132],
  [")", -1],
  ["'''", 134,
   "\"\"\"", 136,
   /^(?:\'(?:\\.|(?!\').)*\'|\"(?:\\.|(?!\").)*\")/, -1],
  ["\\", 135,
   [0, /^(?!\'\'\')/, /^[^]/], 134,
   "'''", -1],
  [/^[^]/, 134],
  ["\\", 137,
   [0, /^(?!\"\"\")/, /^[^]/], 136,
   "\"\"\"", -1],
  [/^[^]/, 136],
  [1, 103, 139],
  [1, 6, 140],
  [3, "keyword", e[8], 141,
   0, 143],
  [1, 6, 142],
  [3, "def", e[9], 143],
  [1, 6, 144],
  [",", 145,
   0, -1],
  [1, 6, 146],
  [1, 103, 147,
   0, 148],
  [1, 6, 149],
  [1, 6, 144],
  [3, "keyword", e[8], 150,
   0, 148],
  [1, 6, 151],
  [3, "def", e[9], 148],
  [2, 243, 153, {"name":"ParamList"}],
  [1, 6, 154],
  ["->", 155,
   0, 157],
  [1, 6, 156],
  [3, "type", e[9], 157,
   1, 103, 157],
  [1, 6, 158],
  [":", 159],
  [1, 6, 160],
  [1, 110, -1],
  [3, "def", e[9], 162],
  [1, 6, 163],
  [2, 128, 164, {"name":"ArgList"},
   0, 164],
  [1, 6, 165],
  [":", 166],
  [1, 6, 167],
  [1, 110, -1],
  [e[9], 169],
  [1, 6, 170],
  [3, "keyword", e[8], 171,
   0, 173],
  [1, 6, 172],
  [3, "def", e[9], 173],
  [1, 6, 174],
  [",", 175,
   0, -1],
  [1, 6, 176],
  [e[9], 177,
   0, 178],
  [1, 6, 179],
  [1, 6, 174],
  [3, "keyword", e[8], 180,
   0, 178],
  [1, 6, 181],
  [3, "def", e[9], 178],
  [e[9], 183],
  [1, 6, 184],
  [3, "keyword", e[8], 185],
  [1, 6, 186],
  [3, "def", e[9], 187,
   0, 187],
  [1, 6, 188],
  [",", 189,
   0, -1],
  [1, 6, 190],
  [e[9], 191,
   0, 192],
  [1, 6, 193],
  [1, 6, 188],
  [3, "keyword", e[8], 194],
  [1, 6, 195],
  [3, "def", e[9], 192,
   0, 192],
  [3, "variable", e[9], 197],
  [1, 6, 198],
  [",", 199,
   0, -1],
  [1, 6, 200],
  [3, "variable", e[9], 201,
   0, 201],
  [1, 6, 198],
  [2, 248, -1, {"name":"ParenExpr"},
   2, 257, -1, {"name":"ArrayLiteral"},
   2, 266, -1, {"name":"ObjectLiteral"},
   3, "number", e[23], -1,
   0, 203,
   3, "operator", "...", -1,
   3, "atom", e[24], -1,
   3, "atom", e[25], -1,
   3, "keyword", e[26], 206,
   3, "keyword", e[27], 210,
   3, "variable callee", e[30], -1,
   3, "variable", e[9], -1],
  [2, 50, 204, {"name":"string","token":"string"}],
  [1, 6, 205],
  [0, 203,
   0, -1],
  [1, 6, 207],
  [3, "keyword", e[18], 208,
   1, 122, -1],
  [1, 6, 209],
  [1, 103, -1],
  [1, 6, 211],
  [2, 273, -1, {"name":"LambdaDef"}],
  [3, "operator", e[28], 213,
   3, "keyword", e[29], 213,
   2, 128, -1, {"name":"ArgList"},
   2, 278, -1, {"name":"Subscript"},
   ".", 215,
   3, "keyword", e[0], 217],
  [1, 6, 214],
  [1, 103, -1],
  [1, 6, 216],
  [3, "property callee", e[30], -1,
   3, "property", e[9], -1],
  [1, 6, 218],
  [1, 103, 219],
  [1, 6, 220],
  [3, "keyword", e[2], 221,
   0, -1],
  [1, 6, 222],
  [1, 103, -1],
  ["\n", 224],
  [/^[ \t]/, 224,
   3, "comment", /^\#.*/, 224,
   "\n", 224,
   0, 225],
  [[7, "stillIndented"], 226,
   0, -1],
  [2, 8, 227, {"name":"Statement"}],
  [/^[ \t]/, 227,
   3, "comment", /^\#.*/, 227,
   "\n", 227,
   0, 225],
  [3, "operator", e[20], 229,
   3, "keyword", e[21], 229,
   1, 202, 230],
  [1, 6, 228],
  [1, 6, 231],
  [1, 283, 232,
   0, -1],
  [1, 6, 231],
  [3, "operator", "**", 234,
   0, 234],
  [1, 6, 235],
  [1, 103, 236],
  [1, 6, 237],
  [",", 238,
   0, -1],
  [1, 6, 239],
  [3, "operator", "**", 240,
   0, 240,
   0, 241],
  [1, 6, 242],
  [1, 6, 237],
  [1, 103, 241],
  ["(", 244],
  [1, 6, 245],
  [1, 294, 246,
   0, 246],
  [1, 6, 247],
  [")", -1],
  ["(", 249],
  [1, 6, 250],
  [1, 103, 251,
   0, 255],
  [1, 6, 252],
  [",", 253,
   1, 320, 255,
   0, 255],
  [1, 6, 254],
  [1, 122, 255,
   0, 255],
  [1, 6, 256],
  [")", -1],
  ["[", 258],
  [1, 6, 259],
  [1, 103, 260,
   0, 264],
  [1, 6, 261],
  [",", 262,
   1, 320, 264,
   0, 264],
  [1, 6, 263],
  [1, 122, 264,
   0, 264],
  [1, 6, 265],
  ["]", -1],
  ["{", 267],
  [1, 6, 268],
  [1, 331, 269,
   0, 271],
  [1, 6, 270],
  [1, 320, 271,
   0, 271],
  [1, 6, 272],
  ["}", -1],
  [1, 337, 274,
   0, 274],
  [1, 6, 275],
  [":", 276],
  [1, 6, 277],
  [1, 103, -1],
  ["[", 279],
  [1, 6, 280],
  [1, 355, 281],
  [1, 6, 282],
  ["]", -1],
  [3, "operator", e[28], 284,
   3, "keyword", e[29], 284,
   2, 128, -1, {"name":"ArgList"},
   2, 278, -1, {"name":"Subscript"},
   ".", 286,
   3, "keyword", e[0], 288],
  [1, 6, 285],
  [1, 228, -1],
  [1, 6, 287],
  [3, "property callee", e[30], -1,
   3, "property", e[9], -1],
  [1, 6, 289],
  [1, 228, 290],
  [1, 6, 291],
  [3, "keyword", e[2], 292,
   0, -1],
  [1, 6, 293],
  [1, 228, -1],
  [2, 381, 295, {"name":"op","token":"operator"},
   0, 295],
  [1, 6, 296],
  [3, "atom", e[25], 297,
   3, "def", e[9], 297],
  [1, 6, 298],
  [":", 299,
   0, 300],
  [1, 6, 301],
  [1, 6, 302],
  [3, "type", e[9], 300,
   1, 103, 300],
  [3, "operator", "=", 303,
   0, 305],
  [1, 6, 304],
  [1, 103, 305],
  [1, 6, 306],
  [",", 307,
   0, -1],
  [1, 6, 308],
  [2, 381, 309, {"name":"op","token":"operator"},
   0, 309,
   0, 310],
  [1, 6, 311],
  [1, 6, 306],
  [3, "atom", e[25], 312,
   3, "def", e[9], 312],
  [1, 6, 313],
  [":", 314,
   0, 315],
  [1, 6, 316],
  [1, 6, 317],
  [3, "type", e[9], 315,
   1, 103, 315],
  [3, "operator", "=", 318,
   0, 310],
  [1, 6, 319],
  [1, 103, 310],
  [3, "keyword", e[6], 321,
   0, 321],
  [1, 6, 322],
  [3, "keyword", e[4], 323],
  [1, 6, 324],
  [1, 116, 325],
  [1, 6, 326],
  [3, "keyword", e[7], 327],
  [1, 6, 328],
  [1, 103, 329],
  [1, 6, 330],
  [1, 320, -1,
   1, 384, -1,
   0, -1],
  [2, 389, 332, {"name":"DictProp"}],
  [1, 6, 333],
  [",", 334,
   0, -1],
  [1, 6, 335],
  [2, 389, 336, {"name":"DictProp"},
   0, 336],
  [1, 6, 333],
  [3, "operator", e[31], 338,
   0, 338],
  [1, 6, 339],
  [3, "def", e[9], 340],
  [1, 6, 341],
  [3, "operator", "=", 342,
   0, 344],
  [1, 6, 343],
  [1, 103, 344],
  [1, 6, 345],
  [",", 346,
   0, -1],
  [1, 6, 347],
  [3, "operator", e[31], 348,
   0, 348,
   0, 349],
  [1, 6, 350],
  [1, 6, 345],
  [3, "def", e[9], 351],
  [1, 6, 352],
  [3, "operator", "=", 353,
   0, 349],
  [1, 6, 354],
  [1, 103, 349],
  [1, 103, 356,
   ":", 357],
  [1, 6, 358],
  [1, 6, 359],
  [":", 360,
   0, 366],
  [1, 103, 361,
   0, 361],
  [1, 6, 362],
  [1, 6, 363],
  [1, 103, 366,
   0, 366],
  [":", 364,
   0, 366],
  [1, 6, 365],
  [1, 103, 366,
   0, 366],
  [1, 6, 367],
  [",", 368,
   0, -1],
  [1, 6, 369],
  [1, 103, 370,
   ":", 371,
   0, 372],
  [1, 6, 373],
  [1, 6, 374],
  [1, 6, 367],
  [":", 375,
   0, 372],
  [1, 103, 376,
   0, 376],
  [1, 6, 377],
  [1, 6, 378],
  [1, 103, 372,
   0, 372],
  [":", 379,
   0, 372],
  [1, 6, 380],
  [1, 103, 372,
   0, 372],
  ["*", 382],
  [1, 6, 383],
  [/^\*?/, -1],
  [3, "keyword", e[0], 385],
  [1, 6, 386],
  [1, 103, 387],
  [1, 6, 388],
  [1, 320, -1,
   1, 384, -1,
   0, -1],
  [3, "operator", "**", 390,
   1, 103, 392],
  [1, 6, 391],
  [1, 103, -1],
  [1, 6, 393],
  [":", 394,
   0, -1],
  [1, 6, 395],
  [1, 103, -1]
];
var start = 0;
var token = 5;


var grammar = Object.freeze({
	nodes: nodes,
	start: start,
	token: token
});

function getScope(context, scopes) {
  for (var cx = context; cx; cx = cx.parent)
    { if (scopes.indexOf(cx.name) > -1) { return cx } }
}
function isLocal(context, name) {
  for (var cx = context; cx; cx = cx.parent)
    { if (cx.locals && cx.locals.indexOf(name) > -1) { return true } }
  return false
}

var varRE = /(^|\s)variable($|\s)/;

function markLocals(type, scopes, stream, state, once) {
  if (type == "def") {
    var scope = getScope(state.context, scopes), name = stream.current();
    if (scope) {
      if (!scope.locals) { scope.locals = []; }
      if (once && scope.locals.indexOf(name) > -1)
        { return "variable-2" }
      scope.locals.push(name);
    }
  } else if (varRE.test(type) && !/qualified/.test(type) &&
             isLocal(state.context, stream.current())) {
    type = type.replace(varRE, "$1variable-2$2");
  }
  return type
}

var scopes = ["LambdaDef", "FuncDef", "ClassDef"];
var allowNewline = ["ArgList", "ParamList", "ParenExpr", "ArrayLiteral", "ObjectLiteral", "SubScript", "DictProp"];

function maySkipNewline(_line, _pos, cx) {
  return cx && allowNewline.indexOf(cx.name) > -1
}

function countIndent(line, pos) {
  var count = 0;
  for (var i = pos - 1; i >= 0; i--) {
    var ch = line.charCodeAt(i);
    if (ch === 32) { count++; }
    else if (ch === 9) { count += 4; }
    else { break }
  }
  return count
}

function stillIndented(line, pos, cx) {
  while (cx && cx.name != "Statement") { cx = cx.parent; }
  return cx && countIndent(line, pos) > countIndent(cx.startLine, cx.startPos)
}

function aligned(cx) {
  return !/^\s*((#.*)?$)/.test(cx.startLine.slice(cx.startPos + 1))
}

var bracketed = {
  ObjectLiteral: "}",
  ArrayLiteral: "]", SubScript: "]",
  ParamList: ")", ArgList: ")", ParenExpr: ")"
};

function findIndent(cx, textAfter, curLine, config) {
  if (!cx) { return 0 }
  if (cx.name == "string") { return CodeMirror.Pass }

  var brack = bracketed[cx.name];
  if (brack) {
    if (curLine != cx.startLine && aligned(cx))
      { return CodeMirror.countColumn(cx.startLine, cx.startPos, config.tabSize) + 1 }

    var closed = textAfter && textAfter.charAt(0) == brack;
    var flat = closed && brack == "}" || curLine == cx.startLine;
    return findIndent(cx.parent, closed ? null : textAfter, cx.startLine, config) + (flat ? 0 : 2 * config.indentUnit)
  } else if (cx.name == "indentedBody") {
    for (;; cx = cx.parent) {
      if (!cx) { return config.indentUnit }
      if (cx.name == "Statement") { return CodeMirror.countColumn(cx.startLine, null, config.tabSize) + config.indentUnit }
    }
  } else {
    return findIndent(cx.parent, textAfter, curLine, config) +
      ((cx.name == "DictProp" || cx.name == "Statement") && cx.startLine != curLine ? 2 * config.indentUnit : 0)
  }
}

var PythonMode = (function (superclass) {
  function PythonMode(conf) {
    superclass.call(this, grammar, {
      predicates: {maySkipNewline: maySkipNewline, stillIndented: stillIndented}
    });
    this.conf = conf;
  }

  if ( superclass ) PythonMode.__proto__ = superclass;
  PythonMode.prototype = Object.create( superclass && superclass.prototype );
  PythonMode.prototype.constructor = PythonMode;

  PythonMode.prototype.token = function token$$1 (stream, state) {
    return markLocals(superclass.prototype.token.call(this, stream, state), scopes, stream, state, true)
  };

  PythonMode.prototype.indent = function indent (state, textAfter, line) {
    return findIndent(state.contextAt(line, line.length - textAfter.length), textAfter, null, this.conf)
  };

  return PythonMode;
}(CodeMirror.GrammarMode));

PythonMode.prototype.electricInput = /^\s*[\}\]\)]$/;
PythonMode.prototype.closeBrackets = {triples: "'\""};
PythonMode.prototype.lineComment = "#";
PythonMode.prototype.fold = "indent";

CodeMirror.defineMode("google-python", function (conf) { return new PythonMode(conf); });

})));
