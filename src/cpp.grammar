start {
  preprocessorLine? (whitespace Statement)+
}

skip whitespace {
  Statement {
    Namespace |
    Enum |
    Loop |
    Conditional |
    Block |
    return Expression ";" |
    MaybeType declName (Initializer | FunctionDef) |
    ";" |
    Expression ";"
  }

  Loop {
    for "(" Statement* ")" Statement |
    while "(" Expression ")" Statement |
    do Statement while "(" Expression ")"
  }

  Conditional {
    if "(" Expression ")" Statement (else Statement)?
  }

  Block* {
    "{" Statement* "}"
  }

  BlockOf(element, separator)* {
    "{" (element (separator element)*)? "}"
  }

  Namespace { namespace declName Block }

  Enum { enum declName BlockOf(declName, ",") }

  Initializer { '=' Expression }

  FunctionDef { ParamList Block }

  ParamList* { '(' ListOf(Type declName) ')' }

  Expression {
    prefixOp* BaseExpression ExpressionSuffix*
  }

  BaseExpression {
    ParenExpr |
    atom |
    number |
    string |
    new Expression |
    identifier ("::" identifier)*
  }

  ParenExpr* {
    '(' Expression ')'
  }

  ExpressionSuffix {
    ArgList |
    '[' Expression ']' |
    binop Expression |
    '?' Expression ':' Expression |
    suffixOp
  }

  ArgList* {
    '(' ListOf(Expression) ')'
  }

  MaybeType {
    maybeTypeName TypeSuffix*
  }

  Type {
    typeName TypeSuffix*
  }

  TypeSuffix {
    "[" number? "]" |
    "<" Type+ ">" |
    "*" | "&"
  }

  ListOf(expr) {
    (expr ("," expr)*)?
  }
}

tokens {
  namespace { kw("namespace") }
  enum { kw("enum") }
  return { kw("return") }
  if { kw("if") }
  else { kw("else") }
  for { kw("for") }
  while { kw("while") }
  do { kw("do") }
  new { kw("new") }

  atom { "true" | "false" | "null" } = "atom"

  identifier { identifierStart identifierChar* } = "variable"

  number {
    (digit+ ("." digit*)? | "." digit+) (("e" | "E") "-"? digit+)? |
    "0x" (digit | "a"-"f" | "A"-"F")+
  } = "number"

  string {
    "'" ("\\" . | (!"'" .))* "'" |
    '"' ("\\" . | (!'"' .))* '"'
  } = "string"

  prefixOp {
    "++" | "--" | "!" | "~" | "&"
  } = "operator"

  suffixOp {
    "++" | "--"
  } = "operator"

  binop {
    ("+" | "-" | "/" | "*" | "%" | ">" ">"? | "<" "<"? | "=" | "|" | "&") "="?
  } = "operator"
}

whitespace {
  ("\n" preprocessorLine? |
   " " | "\t" |
   comment)*
}

preprocessorLine { "#" .* } = "meta"

declName { identifierStart identifierChar* } = "def"

typeName {
  identifierStart identifierChar*
} = "variable-3"

maybeTypeName {
  identifierStart identifierChar* ~(!identifierStart spaceChar* (("[" spaceChar* (digit+ spaceChar*)? "]" | "*" | "&" | "<" (!">" _)* ">") spaceChar*)* identifierStart)
} = "variable-3"

comment { "/*" (!"*/" _)* "*/" | "//" .* } = "comment"

kw(value) { value !identifierChar } = "keyword"

letter { "a"-"z" | "A"-"Z" | "\xa1"-"\uffff" | "_" }

digit { "0"-"9" }

identifierStart { letter | "~" }

identifierChar { letter | digit }

spaceChar { "\n" | "\t" | " " }
