start top {
  preprocessorLine? (whitespace Statement)+
}

skip whitespace {
  context Statement {
    Enum |
    Loop |
    Conditional |
    Switch |
    Block |
    breakCont ";" |
    goto identifier ";" |
    return Expression? ";" |
    Struct |
    DeclType DeclRest |
    Label Statement |
    ";" |
    Expression ";"
  }

  context DeclType {
    ((modifier | qualifier)+ typeName | typeModifier+ modifiableType?) TypeSuffix* | MaybeType
  }   

  DeclRest {
    declName (FunctionDef | Initializer? ("," declName Initializer?)* ";")
  }

  Loop {
    for "(" Statement Expression? ";" Expression? ")" Statement |
    while ParenExpr Statement |
    do Statement while ParenExpr ";"
  }

  Conditional {
    if ParenExpr Statement (else Statement)?
  }

  Switch {
    switch ParenExpr Block
  }

  Label {
    (default | case Expression | labelIdentifier) ":"
  }

  context Block {
    "{" Statement* "}"
  }

  context BlockOf(element, separator) {
    "{" (element (separator element)*)? "}"
  }

  Enum { enum declName? BlockOf(declName (op("=") Expression)?, ",")? }

  Initializer { op("=") Expression }

  context FunctionDef { ParamList (";" | Block) }

  context ParamList { "(" ListOf(Type declName?) ")" }

  Expression {
    ExpressionPrefix* BaseExpression ExpressionSuffix*
  }

  ExpressionPrefix {
    prefixOp | sizeof
  }

  BaseExpression {
    ParenExpr Expression? |
    atom |
    number |
    string |
    BlockOf(Expression, ",") |
    variableName
  }

  context ParenExpr {
    '(' Expression? ')'
  }

  ExpressionSuffix {
    ArgList |
    '[' Expression ']' |
    suffixOp |
    ("->" | ".") fieldName |
    binOp Expression |
    '?' Expression ':' Expression
  }

  context ArgList {
    '(' ListOf(Expression) ')'
  }

  MaybeType {
    maybeTypeName TypeSuffix*
  }

  Type {
    (modifier | qualifier)* typeName TypeSuffix*
  }

  Struct {
    (structUnion) declName? BlockOf(StructField, ";")? ";"
  }

  StructField {
    Type fieldName? (":" number)?
  }

  TypeSuffix {
    "[" number? "]" |
    ("*" | "&") |
    qualifier
  }

  ListOf(expr) {
    (expr ("," expr)*)?
  }
}

tokens {
  enum { kw("enum") }
  return { kw("return") }
  if { kw("if") }
  else { kw("else") }
  for { kw("for") }
  while { kw("while") }
  do { kw("do") }
  breakCont { kw("break" | "continue") }
  goto { kw("goto") }
  default { kw("default") }
  case { kw("case") }
  switch { kw("switch") }
  structUnion { kw("struct" | "union") }
  sizeof { kw("sizeof") }
  modifier { kw("register" | "static" | "extern" | "typedef" | "auto") }
  typeModifier { ("unsigned" | "signed" | "long") !identifierChar } = "type"
  modifiableType { ("int" | "float" | "double") !identifierChar } = "type"
  qualifier { kw("const" | "volatile") }

  atom { ("true" | "false" | "null") !identifierChar } = "atom"

  variableName { calleeName | plainVariableName }

  number {
    ("0x" (digit | "a"-"f" | "A"-"F")+ |
     (digit+ ("." digit*)? | "." digit+) (("e" | "E") "-"? digit+)?)
    ("L" | "l" | "U" | "u" | "F" | "f")?
  } = "number"

  string {
    (("L" | "u" "8"? | "U") ~("'" | '"'))?
    ("'" ("\\" _ | (!"'" .))* "'" |
     '"' ("\\" _ | (!'"' .))* '"')
  } = "string"

  prefixOp {
    "++" | "--" | "!" | "~" | "&" | "*"
  } = "operator"

  suffixOp {
    "++" | "--"
  } = "operator"

  binOp {
    ("!" | "+" | "-" | "/" | "*" | "%" | ">" ">"? | "<" "<"? | "=" | "|" | "&") "="?
  } = "operator"
}

calleeName { identifier ~"(" } = "builtin"
plainVariableName { identifier } = "variable"

identifier { identifierStart identifierChar* }

whitespace {
  (" " | "\t" |
   "\n" preprocessorLine? |
   comment)*
}

preprocessorLine { "#" (!("//" | "/*" | "\\") . | "\\" _ )* } = "meta"

declName { identifier } = "def"

fieldName { identifier } = "property"

typeName { typeModifier+ modifiableType? | typeNameInner }

typeNameInner { identifier } = "type"

maybeTypeName {
  // The lookahead tries to figure out whether this identifier is
  // followed by optionally some type suffix and then another identifier
  typeNameInner ~(!identifierChar whitespace TypeSuffix* whitespace identifierStart)
}

comment { "/*" (!"*/" _)* "*/" | "//" .* } = "comment"

kw(value) { value !identifierChar } = "keyword"
op(value) { value } = "operator"

letter { "a"-"z" | "A"-"Z" | "\xa1"-"\uffff" | "_" }

digit { "0"-"9" }

identifierStart { letter }

identifierChar { letter | digit }

spaceChar { "\n" | "\t" | " " }

labelIdentifier { identifier ~(spaceChar* ":" !":") }
