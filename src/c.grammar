start top {
  preprocessorLine? (whitespace Statement)+
}

skip whitespace {
  Statement {
    Enum |
    Loop |
    Conditional |
    Switch |
    Block |
    breakCont ";" |
    goto identifier ";" |
    return Expression ";" |
    (modifier | qualifier)* MaybeType declName (FunctionDef | Initializer ("," declName Initializer)*) |
    Label |
    ";" |
    Expression ";"
  }

  Loop {
    for "(" Statement* ")" Statement |
    while ParenExpr Statement |
    do Statement while ParenExpr ";"
  }

  Conditional {
    if ParenExpr Statement (else Statement)?
  }

  Switch {
    switch ParenExpr Block
  }

  Label {
    (default | case Expression | identifier ~(":" !":")) ":"
  }

  context Block {
    "{" Statement* "}"
  }

  context BlockOf(element, separator) {
    "{" (element (separator element)*)? "}"
  }

  Enum { enum declName? BlockOf(declName ("=" Expression)?, ",")? }

  Initializer { '=' Expression }

  context FunctionDef { ParamList (";" | Block) }

  context ParamList { '(' ListOf(Type declName) ')' }

  Expression {
    ExpressionPrefix* BaseExpression ExpressionSuffix*
  }

  ExpressionPrefix {
    prefixOp | sizeof
  }

  BaseExpression {
    ParenExpr Expression? |
    atom |
    number |
    string |
    BlockOf(Expression, ",") |
    variableName
  }

  context ParenExpr {
    '(' Expression ')'
  }

  ExpressionSuffix {
    ArgList |
    '[' Expression ']' |
    binop Expression |
    '?' Expression ':' Expression |
    suffixOp |
    ("->" | ".") fieldName
  }

  context ArgList {
    '(' ListOf(Expression) ')'
  }

  MaybeType {
    maybeTypeName TypeSuffix*
  }

  Type {
    typeName TypeSuffix* |
    (structUnion) declName? BlockOf(StructField, ";")?
  }

  StructField {
    (modifier | qualifier)* Type fieldName? (":" number)?
  }

  TypeSuffix {
    "[" number? "]" |
    "<" Type+ ">" |
    ("*" | "&") qualifier*
  }

  ListOf(expr) {
    (expr ("," expr)*)?
  }
}

tokens {
  enum { kw("enum") }
  return { kw("return") }
  if { kw("if") }
  else { kw("else") }
  for { kw("for") }
  while { kw("while") }
  do { kw("do") }
  breakCont { kw("break" | "continue") }
  goto { kw("goto") }
  default { kw("default") }
  case { kw("case") }
  switch { kw("switch") }
  structUnion { kw("struct" | "union") }
  sizeof { kw("sizeof") }
  modifier { kw("register" | "static" | "extern" | "typedef" | "auto") }
  qualifier { kw("const" | "volatile") }

  atom { ("true" | "false" | "null") !identifierStart } = "atom"

  variableName { identifier }

  number {
    ((digit+ ("." digit*)? | "." digit+) (("e" | "E") "-"? digit+)? |
     "0x" (digit | "a"-"f" | "A"-"F")+) ("L" | "l" | "U" | "u" | "F" | "f")?
  } = "number"

  string {
    "L"? ("'" ("\\" _ | (!"'" .))* "'" |
          '"' ("\\" _ | (!'"' .))* '"')
  } = "string"

  prefixOp {
    "++" | "--" | "!" | "~" | "&" | "*"
  } = "operator"

  suffixOp {
    "++" | "--"
  } = "operator"

  binop {
    ("+" | "-" | "/" | "*" | "%" | ">" ">"? | "<" "<"? | "=" | "|" | "&") "="?
  } = "operator"
}

identifier { identifierStart identifierChar* } = "variable"

whitespace {
  ("\n" preprocessorLine? |
   " " | "\t" |
   comment)*
}

preprocessorLine { "#" .* } = "meta"

declName { identifierStart identifierChar* } = "def"

fieldName { identifierStart identifierChar* } = "property"

typeName {
  identifierStart identifierChar*
} = "variable-3"

maybeTypeName {
  // The messy lookahead tries to figure out whether this identifier is
  // followed by optionally some type suffix and then another identifier
  identifierStart identifierChar* ~(
    !identifierStart spaceChar*
    (("[" spaceChar* (digit+ spaceChar*)? "]" | "*" | "&" | "<" (!">" _)* ">") spaceChar*)*
    identifierStart
  )
} = "variable-3"

comment { "/*" (!"*/" _)* "*/" | "//" .* } = "comment"

kw(value) { value !identifierChar } = "keyword"

letter { "a"-"z" | "A"-"Z" | "\xa1"-"\uffff" | "_" }

digit { "0"-"9" }

identifierStart { letter }

identifierChar { letter | digit }

spaceChar { "\n" | "\t" | " " }
